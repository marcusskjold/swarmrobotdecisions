<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>//// ================================================
//// Network


// Maximally connected network (tiny one of size 3)

/*
const int R = 3;                       // Number of robots
const int Q = 3;                       // Number of choices
const int NN = 2;                      // Max number of neighbors
const double empirical = 0.0;
double SEEDP[Q] = {1.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true, true},
               {true, false, true},
               {true, true, false}};

*/


// Maximally connected network

/*
const int R = 7;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 6;                      // Max number of neighbors
const double empirical = 0.0;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true, true, true, true, true, true},
               {true, false, true, true, true, true, true},
               {true, true, false, true, true, true, true},
               {true, true, true, false, true, true, true},
               {true, true, true, true, false, true, true},
               {true, true, true, true, true, false, true},
               {true, true, true, true, true, true, false}};
*/

// Test network - medium size

const int Q = 10;
const int R = 10;
const int NN = 4;
const double empirical = 0.0;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;
bool C[R][R] = {{false, true, true, true, false, false, false, false, true, false}, {true, false, true, false, false, false, true, true, false, false}, {true, true, false, true, true, false, false, false, false, false}, {true, false, true, false, true, true, false, false, false, false}, {false, false, true, true, false, true, false, false, true, false}, {false, false, false, true, true, false, true, false, false, false}, {false, true, false, false, false, true, false, true, false, true}, {false, true, false, false, false, false, true, false, true, true}, {true, false, false, false, true, false, false, true, false, true}, {false, false, false, false, false, false, true, true, true, false}};



// Minimally connected network of 7
/*
const int R = 7;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors
const double empirical = 0.00;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true, false, false, false, false, false},
               {true, false, true, false, false, false, false},
               {false, true, false, true, false, false, false},
               {false, false, true, false, true, false, false},
               {false, false, false, true, false, true, false},
               {false, false, false, false, true, false, true},
               {false, false, false, false, false, true, false}};
*/


// Minimally connected network of 20
/*
const int R = 20;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors
const double empirical = 0.00;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
                {true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
                {false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
                {false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
                {false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false, false},
                {false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false},
                {false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false},
                {false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false},
                {false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false},
                {false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false},
                {false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false},
                {false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false},
                {false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false},
                {false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false}};

*/

// Minimally connected network of 10
/* Edge cases appear here, where one robot ends up not registering that it has a full decision group,
while every other robot does, and so they end up in the terminal state, and the final robot gets stuck.
Our theory is that this is because a robot with only one neighbor has bad access to information.
The problem is easily fixed by adding a check for robots being done. */
/*
const int R = 10;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors
const double empirical = 0.0;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true, false, false, false, false, false, false, false, false},
                {true, false, true, false, false, false, false, false, false, false},
                {false, true, false, true, false, false, false, false, false, false},
                {false, false, true, false, true, false, false, false, false, false},
                {false, false, false, true, false, true, false, false, false, false},
                {false, false, false, false, true, false, true, false, false, false},
                {false, false, false, false, false, true, false, true, false, false},
                {false, false, false, false, false, false, true, false, true, false},
                {false, false, false, false, false, false, false, true, false, true},
                {false, false, false, false, false, false, false, false, true, false}};

*/

// Circular network of 10
/* The edge cases described (2025-04-30) do not appear.
This supports our theory that the edge cases only appear for robots with just one neighbor.
*/
/*
const int R = 10;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors
const double empirical = 0.0;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true, false, false, false, false, false, false, false, true},
                {true, false, true, false, false, false, false, false, false, false},
                {false, true, false, true, false, false, false, false, false, false},
                {false, false, true, false, true, false, false, false, false, false},
                {false, false, false, true, false, true, false, false, false, false},
                {false, false, false, false, true, false, true, false, false, false},
                {false, false, false, false, false, true, false, true, false, false},
                {false, false, false, false, false, false, true, false, true, false},
                {false, false, false, false, false, false, false, true, false, true},
                {true, false, false, false, false, false, false, false, true, false}};
*/

// Large random graph similar to paper
/*
const int Q = 10;
const int R = 30;
const int NN = 6;
const double empirical = 0.0;
double SEEDP[Q] = {0.5, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.1};
const int SEEDNUM = 2;

bool C[R][R] = {{false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false}, {true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false}, {false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false}, {true, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false}, {false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false}, {false, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false}, {false, false, false, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false}, {false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false}, {false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false}, {false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false}, {false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false}, {false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false}, {true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false}, {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false}, {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, false}};
*/

//// ================================================
//// Constants and type definitions

typedef int[0,NN-1] neighbor;          // The set of possible neighbor indexes
typedef int[-1,NN-1] optionalNeighbor; // The set of possible neighbor indexes, -1 denoting null
typedef int[0,Q-1] choice;             // The set of choice indexes
typedef int[-1,Q-1] optionalChoice;    // The set of choice indexes
typedef int[0,R-1] robot;              // The set of robot ids
typedef int[-1,R-1] optionalRobot;     // The set of robot ids, -1 denoting null
////Not needed in dfs
//typedef int[0,R+1] levels;
typedef int[0,2] timestamp;            // Synchronization following rock-paper-scissors logic ( 0 &lt; 1 &lt; 2 &lt; 0 )



//// ================================================
//// Robot state

/* Most state is kept in global variables. 
However, a robot only ever accesses the state of its neighbors. 
In this we abstract away the specific communication protocal, while maintaining the requirement that robots have no global knowledge. */


/* The public decision of each robot. Is updated (along P), after publicP and ND but before any neighbor starts recalculating D */
choice decision[R];

///Not used in dfs-version for now
/*The decision group of each robot - true means the robot of that ID is in the same group. Is continuously updated while in the calculateDsize state*/
//bool D[R][R];

/* The public preferences of each robot - the preferences are only updated simultaneously with ND */

double publicP[R][Q];

/* The public size of the consensus group of each robot. 
Is updated atomically, after having calculated D.
The paper calls this the consensus group, we call it the [D]ecision group 
This is to phonetically align the use of C and D for neighbors (connected robots) and consenting (same decision) respectively.*/
int[0,R] ND[R];
int[0,R] publicND[R];

// Locking state
timestamp cycle[R];         // Used to synchronize cyclus.
////omitted in dfs for now
//levels level[R];            // Synchronization while calculating D.

//// =================================================
//// Functions

// Timestamps

// Returns true if the timestamp of robot a is behind or at equal to that of robot b. False if a is in front.
bool compareTimestamps(timestamp a, timestamp b) {
    if (a == b) return true;
    if ((a + 1) % 3 == b) return true;
    return false;
}

// Populate array with random values summing to 1 (PMF)
void initP(double &amp;P[Q]){
    double rands[Q];
    double ssum = 0;
    for (i : choice) {
        double val = random(1);
        rands[i] = val;
        ssum = ssum + val;
    }
    for (i : choice) {
        P[i] = rands[i] / ssum;
    }
}

// Count the number of true values in array
int[0,R] count(bool &amp;A[R]){
    return sum (i : robot) A[i] == true;
}


///Omitted from dfs-version
/*
bool isSubsetOf(bool &amp;A[R], bool &amp;B[R]) {
    return forall (r : robot) A[r] imply B[r];
}
*/

// Get the index of a highest value
choice maxIndex(double &amp;P[Q]){
    choice maxI = 0;
    double max = 0;
    for (i : choice){
        if (P[i] &gt; max) {
            max = P[i];
            maxI = i;
        }
    }
    return maxI;
}

// Get next true value of boolean array A *after* index i.
// Returns -1 if there is no next value
optionalRobot getNextTrue(int i, bool &amp;A[R]){
    while (i &lt; R-1) {
        i++;
        if (A[i]) return i;
        
    }
    return -1;
}

//// ================================================
//// Meta

// Return true if all values are equal. Used for verification
bool allSameTimestamp(timestamp &amp;A[R]){
    timestamp comparison = A[0];
    return forall (i : int[1,R-1]) A[i] == comparison;
}

// Have a robot finished
bool done[R];
bool allDone = false;
bool sameCycle = false;
clock x = 0;
int cyclecounter;

///===================================================
///Used for dfs:

///I don't think this will be necessary***
//Array holding distributions of preferences (a robot should only access its own pref).
//int leadingPrefs[R];
bool prefsUpdated[R];
bool DUpdated[R];


//--------------------------------------------------------------------------------------------------------------
////Depth first search stuff

//Depth first search for a single robot
//The robot has its own stack that it uses for the traversal
//For now the structure of neighbours in the graph used for traversal is
//put in global decarations as two-dimensional boolean array

//Might change capacities



////array for dfs
bool marked[R];

//fields for the stack
int list[R*R+1];
int len=0;



//----------------------------
//// Put an element at the top of the stack
//----------------------------
void push(int element)
{
        list[len] = element;
        len++;
}

//----------------------------
//// Remove the top of the stack and return it
//----------------------------
int pop()
{
        return list[--len];
}

//----------------------------
//// Returns the top element of the stack
//----------------------------
int front()
{
   return list[len - 1];
}

//----------------------------
//// Returns the bottom element of the stack
//----------------------------
int tail()
{
   return list[0];
}

bool isEmpty(){
    return len == 0;
}

//----------------------------
//// Empties stack
//----------------------------
void reset_stack()
{
    len = 0;
}

//----------------------------
////Performs Depth first search
//----------------------------
int dfs(int id) 
{    
    //variable for size of connected graph from the robot
    int groupSize = 0;

    //the current node in the traversal
    int current = id;

    //value for next node to check (set to dummy value)
    int next = -1;

    //the robot's stack is reset
    reset_stack();

    //source node pushed to stack
    push(current);

    //marked-array reset
    for(i : int[0,R-1]){
        marked[i] = false;
    }

    //until stack is empty, keep popping nodes, increment graph-size, and put neighbours on stack
    //bonus: only explore if same leading preference as oneself
    while(!(isEmpty())) {
        current = pop();
        if(!marked[current]&amp;&amp;decision[current]==decision[id]) {
            marked[current] = true;
            groupSize++;
            for(i : int[0,R-1]) {
                next = C[current][i];
                ///&amp;&amp; !marked[next] here?
                if(next) { 
                    push(i);
                }
            }
        }
    }

    //number of traversed nodes (incl. source) returned
    return groupSize;
}
</declaration>
	<template>
		<name>Robot</name>
		<parameter>robot id</parameter>
		<declaration>//// =====================================================
//// State


///((((((((((((((((
///dfs-implementation-related state:
//bool prefsUpdated;

///))))))))))))))))))


optionalRobot neighbors[NN];           // Inverted index of neighbors, index 0 to count(C)-1 contains index of true values in C. -1 for empty slots.
bool mayContinue;                      // Guard and synchronization variable - is updated with compareCycle() and compareLevels()
double P[Q];                           // Preferences as a PMF over all choices in Q.

choice s[Q];                           // s(1) shows the rank of choice 1 if choices were sorted according to this robots preferences.
double divergence;    // The max total disagreement between this robot and its neighbors.

//// =====================================================
//// Methods
// Functions that are simplified by having access to state

    //// Utility

bool isInSameCycle(robot r)      { return cycle[r] == cycle[id]; }
bool isConsenting(robot r)       { return decision[r] == decision[id]; }
bool isRobot(optionalRobot r)    { return r != -1; }
bool isDone(robot r)             { return done[r]; }
////omitted from dfs
//bool isLowerLevel(robot r)       { return level[r] &lt; level[id]; }
//void incrementLevel()            { level[id] = level[id] + 1; }


/**Increment cycle by one and reset lower synchronization variables*/
void incrementCycle()            { 
    cycle[id] = (cycle[id] + 1) % 3; 
    cyclecounter++;
}


    //// Synchronization methods

/**Returns true if the all neighbors are on the same as self.*/
bool compareCycle() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (!isRobot(r)) {return true; } // All neighbors checked
        if (!isInSameCycle(r)) { return false; }
    }
    return true;

}

/**Returns true if no consenting neighbor is behind this robot in updating their D array.*/
/* This ensures that the robot does not ask a neighbor twice before that neighbor has a chance to update their values.
A neighbor can never be in an earlier cycle than this robot when compareLevels() is called.
This is because compareLevelsConsenting is only called in state `FindingDecisionGroup`.
Cycles are only incremented when entering state `AwaitingNeighbors`, and `AwaitingNeighbors` can only be exited when all neighbors are in the same or next cycle*/

bool noConNeighBehind() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (!isRobot(r)) {return true; } // All neighbors checked
        if (isInSameCycle(r) &amp;&amp; !DUpdated[r]) {  return false; } ///TODO: Seems first clause could be removed?!**
    }
    return true;
}


/**Returns true if every neighbor has updated their preference.*/
/* This ensures that the robot does not start calculating their Decision groups based on outdated information.
A neighbor can never be in an earlier cycle than this robot when compareLevels() is called.
This is because compareLevels is only called in state `PreferencesUpdated`.
Cycles are only incremented when entering state `AwaitingNeighbors`, and `AwaitingNeighbors` can only be exited when all neighbors are in the same or next cycle*/
bool noNeighBehind() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (!isRobot(r)) {return true; } // All neighbors checked
        ////adjusted for dfs-case
        //if (isInSameCycle(r) &amp;&amp; isLowerLevel(r)) {  return false; }
        if (isInSameCycle(r) &amp;&amp; !prefsUpdated[r]) {  return false; } //TODO: fix without risking livelock (handle some in terminal)
    }
    return true;
}

    //// Updating and calculating preferences (P)

void sortPreferences(){
    bool mask[Q];
    for (c : choice) { mask[c] = true;}
    for (c : choice) {
        double maxV;
        choice maxI;
        for (d : choice) {
            if (mask[d] &amp;&amp; P[d] &gt; maxV) { 
                maxV = P[d]; 
                maxI = d;
            }
        }
        mask[maxI] = false;
        s[maxI] = c;
    }
    return;
}

///==========
///made as alternative to using D-array for finding agreeing neighbours
bool localConsensus(){
optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; !isConsenting(r)) {  return false; }
    }
    return true;
}
///===========

bool isLocallyConverged() {
    double max = 0;
    double temp;
    int[0,R] r;
    int[0,R] t;
    ///new injection with alternative function
    //if (!isSubsetOf(C[id], D[id])){ return false; }
    if (!localConsensus()){ return false; }
    for (r = 0; r &lt; R; r++) {
        for (t = r+1; t &lt; R; t++) {
            temp = 0;
            for (c : choice) {
                temp = temp + fabs(publicP[r][c] - publicP[t][c]);
            }
            if (temp &gt; max) { max = temp; }
        }
    }
    divergence = max;
    return max &lt; empirical;
}


double L(choice rank) {
    const double n = Q - 1;
    double rankF = rank;                                              // An int between 0 &amp; n, smaller should give higher result
    double Ll = (1.0 / n+1.0) * pow((divergence / empirical), 0.3);   // A number between 0 &amp; 1/Q
    double Lu = (2.0 / n+1.0) - Ll;                                   // A number between 1/Q &amp; 2/Q
    double result = (Ll * (rankF / n)) + (Lu * ((n - rank) / n));    
    return result;
}

void accelerateConvergence() {
    double psum = 0.0;
    sortPreferences();
    for (c : choice) {
        P[c] = P[c] * L(s[c]);
        psum = psum + P[c];
    }
    for (c : choice) {
        P[c] = (P[c] / psum);
    }

}

/**Updates the preferences of this robot according to the equation given in (Liu &amp; Lee, 2020)*/
/* Uses the last coherent state of each neighbor.*/
void updateP() {
    double sumP[Q];    // The sum of all neighbor's preference value for each choice (including self)
    int sumND;         // The total size of all neighbor's decision groups (including self)
    optionalRobot r;

    // First add yourself
    for (c : choice) {
        sumP[c] = sumP[c] + publicND[id] * publicP[id][c];
    }
    sumND += publicND[id];

    // Then add the each neighbor
    for (n : neighbor) {
        r = neighbors[n];
        if ( isRobot(r) ) {
            for (c : choice) {
                sumP[c] = sumP[c] + publicND[r] * publicP[r][c];
            }
            sumND += publicND[r];
        }
    }

    // Normalize
    for (c : choice) { P[c] = sumP[c] / sumND; } 
    
    // Determine local convergence
    if (empirical &gt; 0 &amp;&amp; isLocallyConverged()) {
        accelerateConvergence();
    }
}

    //// Calculating consensus / decision group (D)

///Omitted from dfs
/** Add every robot to the decision group (D) of this robot that are present
in the decision group of any neighbors with the same decision as this. s*/
/*
void syncWithConsentingNeighbors() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (!isRobot(r)) {return; } // All neighbors checked
        if (isConsenting(r)) {
            for (s : robot) {
                D[id][s] = D[r][s] || D[id][s];     // Union operation
            }
        }
    }
}
*/

    //// Initializations
/*
// Resets the D array. 
void resetD() {
    for (r : robot) { D[id][r] = false; }
    D[id][id] = true;                      // A robot always agrees with itself
    ND[id] = 1;
}
*/

// Create inverted Index of neighbors (neighbors array)
void initNeighbors() {
    optionalRobot nextNeighbor;
    nextNeighbor = getNextTrue(-1, C[id]);                    // Find first neighboring robot

    for (n : neighbor) {
        if (isRobot(nextNeighbor)) {
            neighbors[n] = nextNeighbor;                  // Save neighbor in neighbors
            nextNeighbor = getNextTrue(nextNeighbor, C[id]);  // Find next neighboring robot
        } else {
            neighbors[n] = -1;                            // If there are no more neighbors
        }
    }
}

// Initialize a robot with random preferences.
void initialize() {
    initP(P);
    decision[id] = maxIndex(P);
    initNeighbors();
    cycle[id] = 0;
    ////not needed in dfs for now
    //resetD();
    //level[id] = 1;
    // Meta values
    cyclecounter = 0;
    allDone = false;
    done[id] = false;
    x = 0;
    sameCycle = false;
    ////addition for dfs:
    mayContinue = true;
    publicP[id] = P;
}

// Initialize a robot with random preferences.
void initializeSeeding() {
    if (id &lt; SEEDNUM) { P = SEEDP;}
    else { initP(P); }
    decision[id] = maxIndex(P);
    initNeighbors();
    cycle[id] = 0;
    ////not needed in dfs for now
    //resetD();
    //level[id] = 1;
    // Meta values
    cyclecounter = 0;
    allDone = false;
    done[id] = false;
    x = 0;
    sameCycle = false;
    ////addition for dfs:
    mayContinue = true;
    publicP[id] = P;
}</declaration>
		<location id="id0" x="-280" y="-289">
			<name x="-263" y="-306">Initial</name>
			<label kind="exponentialrate" x="-306" y="-297">1</label>
			<committed/>
		</location>
		<location id="id1" x="-178" y="-212">
			<name x="-144" y="-221">PreferencesUpdated</name>
			<label kind="exponentialrate" x="-178" y="-221">1</label>
		</location>
		<location id="id2" x="187" y="-85">
			<name x="204" y="-110">FindingDecisionGroup</name>
			<label kind="exponentialrate" x="187" y="-93">1</label>
		</location>
		<location id="id3" x="187" y="-331">
			<name x="204" y="-357">AwaitingNeighbors</name>
			<label kind="exponentialrate" x="187" y="-340">1</label>
		</location>
		<location id="id4" x="756" y="-331">
			<name x="746" y="-365">Terminal</name>
			<label kind="exponentialrate" x="748" y="-340">1</label>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-59" y="-68">!mayContinue</label>
			<label kind="assignment" x="-59" y="-42">ND[id] = dfs(id),
mayContinue = true,
DUpdated[id] = true</label>
			<nail x="42" y="-85"/>
			<nail x="42" y="34"/>
			<nail x="187" y="34"/>
		</transition>
		<transition id="id6">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-365" y="-178">!mayContinue</label>
			<label kind="assignment" x="-365" y="-161">mayContinue = noNeighBehind()</label>
			<nail x="-238" y="-238"/>
			<nail x="-238" y="-187"/>
		</transition>
		<transition id="id7">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="476" y="-323">ND[id] == R</label>
			<label kind="assignment" x="476" y="-306">done[id] = true,
allDone = count(done) == R ? 1 : 0,
sameCycle = allSameTimestamp(cycle),
prefsUpdated[id]=true,
DUpdated[id]=true</label>
			<label kind="comments" x="467" y="-204">These updates are only for verification (SMC)</label>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="102" y="-416">!mayContinue &amp;&amp; ND[id] != R</label>
			<label kind="assignment" x="110" y="-399">mayContinue = compareCycle()</label>
			<nail x="204" y="-374"/>
			<nail x="170" y="-374"/>
		</transition>
		<transition id="id9">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-187" y="-399">mayContinue &amp;&amp; publicND[id] != R</label>
			<label kind="assignment" x="-136" y="-382">updateP(),
decision[id] = maxIndex(P),
mayContinue = false,
prefsUpdated[id] = true,
DUpdated[id] = false</label>
		</transition>
		<transition id="id10">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="195" y="-238">mayContinue&amp;&amp;noConNeighBehind()</label>
			<label kind="assignment" x="195" y="-221">publicP[id] = P,
publicND[id] = ND[id],
incrementCycle(),
prefsUpdated[id] = false,
mayContinue = false</label>
			<label kind="comments" x="365" y="-51">Removed &amp;&amp;noConNeighBehind() from guard for now</label>
			<nail x="187" y="-102"/>
		</transition>
		<transition id="id11">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="8" y="-178">mayContinue</label>
			<label kind="assignment" x="8" y="-161">mayContinue = false</label>
		</transition>
		<transition id="id12">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-255" y="-289">initializeSeeding()</label>
		</transition>
	</template>
	<system>system Robot;
</system>
	<queries>
		<option key="--diagnostic" value="-1"/>
		<query>
			<formula>E[&lt;=10000; 100](max: cyclecounter / R)</formula>
			<comment>How many cycles in total does robot 0 go through before consensus is reached.

Results:
For 7 robots with random preferences in a fully connected graphs. [&lt;=1000;5000] ≈ 2 (as expected)</comment>
			<result outcome="success" type="quantity" value="5.06 ± 0.502779 (95% CI)" timestamp="2025-05-12 11:33:21 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>5.06 ± 0.502779 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: cyclecounter / R" yaxis="probability density">
					<series title="density" type="b(2.000000)" color="0x0000ff" encoding="csv">3.0,0.265
5.0,0.155
7.0,0.035
9.0,0.025
11.0,0.005
13.0,0.01
15.0,0.0
17.0,0.005
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">5.06,0.0
5.06,0.265
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [3, 18]
Mean estimate of displayed sample: 5.06 ± 0.5028 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: cyclecounter / R" yaxis="probability">
					<series title="probability" type="b(2.000000)" color="0x0000ff" encoding="csv">3.0,0.53
5.0,0.31
7.0,0.07
9.0,0.05
11.0,0.01
13.0,0.02
15.0,0.0
17.0,0.01
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">5.06,0.0
5.06,0.53
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [3, 18]
Mean estimate of displayed sample: 5.06 ± 0.5028 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: cyclecounter / R" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">3.0,0.0
5.0,0.53
7.0,0.84
9.0,0.91
11.0,0.96
13.0,0.97
15.0,0.99
17.0,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">5.06,0.0
5.06,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [3, 18]
Mean estimate of displayed sample: 5.06 ± 0.5028 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: cyclecounter / R" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">3.0,0.03621669264517642
5.0,0.6305948358056055
7.0,0.9056897100260538
9.0,0.9580164043716077
11.0,0.9889955060138118
13.0,0.9937700284616936
15.0,0.9997468539670226
17.0,0.9997468539670226
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">3.0,0.0
5.0,0.4275814848900451
7.0,0.7532124025891377
9.0,0.8360177449703647
11.0,0.9007428432873401
13.0,0.91482394702572
15.0,0.9455406146079194
17.0,0.9455406146079194
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">3.0,0.0
5.0,0.53
7.0,0.84
9.0,0.91
11.0,0.96
13.0,0.97
15.0,0.99
17.0,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">5.06,0.0
5.06,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [3, 18]
Mean estimate of displayed sample: 5.06 ± 0.5028 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: cyclecounter / R" yaxis="count">
					<series title="count" type="b(2.000000)" color="0x0000ff" encoding="csv">3.0,53.0
5.0,31.0
7.0,7.0
9.0,5.0
11.0,1.0
13.0,2.0
15.0,0.0
17.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">5.06,0.0
5.06,53.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [3, 18]
Mean estimate of displayed sample: 5.06 ± 0.5028 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=10000; 100](max: x * (allDone ? 0 : 1) )</formula>
			<comment/>
			<result outcome="success" type="quantity" value="60.0027 ± 5.18055 (95% CI)" timestamp="2025-05-12 11:33:26 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>60.0027 ± 5.18055 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability density">
					<series title="density" type="b(15.155521)" color="0x0000ff" encoding="csv">23.797060315330523,0.013196511389602886
38.9525808991701,0.021114418223364618
54.108101483009676,0.011876860250642598
69.26362206684927,0.008577732403241877
84.41914265068884,0.0072580812642815875
99.57466323452842,0.0026393022779205772
114.730183818368,0.0
129.88570440220758,6.598255694801443E-4
145.04122498604715,0.0
160.19674556988673,6.598255694801443E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">60.0026585605834,0.0
60.0026585605834,0.02111441822336462
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.156, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [23.8, 175.4]
Mean estimate of displayed sample: 60 ± 5.181 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="probability" type="b(15.155521)" color="0x0000ff" encoding="csv">23.797060315330523,0.2
38.9525808991701,0.32
54.108101483009676,0.18
69.26362206684927,0.13
84.41914265068884,0.11
99.57466323452842,0.04
114.730183818368,0.0
129.88570440220758,0.01
145.04122498604715,0.0
160.19674556988673,0.01
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">60.0026585605834,0.0
60.0026585605834,0.32
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.156, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [23.8, 175.4]
Mean estimate of displayed sample: 60 ± 5.181 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">23.797060315330523,0.0
38.9525808991701,0.2
54.108101483009676,0.52
69.26362206684927,0.7
84.41914265068884,0.83
99.57466323452842,0.94
114.730183818368,0.98
129.88570440220758,0.98
145.04122498604715,0.99
160.19674556988673,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">60.0026585605834,0.0
60.0026585605834,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.156, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [23.8, 175.4]
Mean estimate of displayed sample: 60 ± 5.181 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">23.797060315330523,0.03621669264517642
38.9525808991701,0.2918426890886281
54.108101483009676,0.6209945198220413
69.26362206684927,0.7875935795104634
84.41914265068884,0.8977350899644717
99.57466323452842,0.9776651139286836
114.730183818368,0.9975686631760574
129.88570440220758,0.9975686631760574
145.04122498604715,0.9997468539670226
160.19674556988673,0.9997468539670226
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">23.797060315330523,0.0
38.9525808991701,0.12665555210195586
54.108101483009676,0.4177897654063067
69.26362206684927,0.6001853238201958
84.41914265068884,0.7418245893678413
99.57466323452842,0.873970065419177
114.730183818368,0.9296160675289299
129.88570440220758,0.9296160675289299
145.04122498604715,0.9455406146079194
160.19674556988673,0.9455406146079194
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">23.797060315330523,0.0
38.9525808991701,0.2
54.108101483009676,0.52
69.26362206684927,0.7
84.41914265068884,0.83
99.57466323452842,0.94
114.730183818368,0.98
129.88570440220758,0.98
145.04122498604715,0.99
160.19674556988673,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">60.0026585605834,0.0
60.0026585605834,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.156, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [23.8, 175.4]
Mean estimate of displayed sample: 60 ± 5.181 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: x * (allDone ? 0 : 1)" yaxis="count">
					<series title="count" type="b(15.155521)" color="0x0000ff" encoding="csv">23.797060315330523,20.0
38.9525808991701,32.0
54.108101483009676,18.0
69.26362206684927,13.0
84.41914265068884,11.0
99.57466323452842,4.0
114.730183818368,0.0
129.88570440220758,1.0
145.04122498604715,0.0
160.19674556988673,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">60.0026585605834,0.0
60.0026585605834,32.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.156, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [23.8, 175.4]
Mean estimate of displayed sample: 60 ± 5.181 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000; 100](&lt;&gt; sameCycle &amp;&amp; allDone)</formula>
			<comment>It would be nice to have the reverse query.
Within this time, how much time does it take at most to reach this state?
There should be a few edge cases where a robot takes one more cycle than the others. 
This is because of unknown interleavings that causes a single robot (seemingly a robot with only one neighbor) 
to not calculate their decision group size correctly at the first cycle where all robots agree.</comment>
			<result outcome="failure" type="quantity" value="0.78107 ± 0.0839858 (95% CI)" timestamp="2025-05-12 11:33:30 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>0.78107 ± 0.0839858 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000]([] allDone imply sameCycle) &gt;= 0.98</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2025-05-12 11:33:35 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000](&lt;&gt; allDone) &gt;= 0.98</formula>
			<comment/>
			<option key="--diagnostic" value="-1"/>
			<result outcome="success" type="quality" timestamp="2025-05-12 11:33:39 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000](&lt;&gt; Robot(0).Terminal) &gt;= 0.98</formula>
			<comment/>
			<option key="--diagnostic" value="-1"/>
			<result outcome="success" type="quality" timestamp="2025-05-12 11:33:43 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=51000; 100] { publicND } : 1 :  !allDone &amp;&amp; (x &gt;= 50000)</formula>
			<comment>Counterexamples, should fail</comment>
			<result outcome="failure" type="interval" value="≤ 0.0362167 (95% CI)" timestamp="2025-05-12 11:33:47 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>≤ 0.0362167 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000; 100](&lt;&gt; allDone &amp;&amp; (decision[0] == 0))</formula>
			<comment/>
			<result outcome="failure" type="quantity" value="0.102983 ± 0.0609993 (95% CI)" timestamp="2025-05-12 11:34:34 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>0.102983 ± 0.0609993 (95% CI)</details>
			</result>
		</query>
	</queries>
</nta>
