<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>//// ================================================
//// Network

//This is a network of 5 robots with 30 options
const int R = 5;
const int Q = 30;
const int NN = 6;
const double empirical = 0.0;
//Neighbour Matrix
bool C[R][R] = {  {false, false, true, false, false},
  {false, false, true, false, false},
  {true, true, false, true, false},
  {false, false, true, false, true},
  {false, false, false, true, false}};
//Network dependency: 3.125
//Most important node: 2

//// ================================================
//// Constants and type definitions

typedef int[0,NN-1] neighbor;          // The set of possible neighbor indexes
typedef int[-1,NN-1] optionalNeighbor; // The set of possible neighbor indexes, -1 denoting null
typedef int[0,Q-1] choice;             // The set of choice indexes
typedef int[-1,Q-1] optionalChoice;    // The set of choice indexes
typedef int[0,R-1] robot;              // The set of robot ids
typedef int[-1,R-1] optionalRobot;     // The set of robot ids, -1 denoting null
typedef int[0,2] timestamp;            // Synchronization following rock-paper-scissors logic ( 0 &lt; 1 &lt; 2 &lt; 0 )



//// ================================================
//// Robot state

/* The public decision of each robot.*/
choice decision[R];

/* The public preferences of each robot */
double P[R][Q];

/* The public size of the consensus group of each robot. 
The paper calls this the consensus group, we call it the [D]ecision group 
This is to phonetically align the use of C and D for neighbors (connected robots) and consenting (same decision) respectively.*/
int[0,R] ND[R];

// Locking state
timestamp cycle[R];         // Used to synchronize cyclus.

//// =================================================
//// Functions

// Populate array with random values summing to 1 (PMF)
void initP(double &amp;P[Q]){
    double rands[Q];
    double ssum = 0;
    for (i : choice) {
        double val = random(1);
        rands[i] = val;
        ssum = ssum + val;
    }
    for (i : choice) {
        P[i] = rands[i] / ssum;
    }
}

// Count the number of true values in array
int[0,R] count(bool &amp;A[R]){
    return sum (i : robot) A[i] == true;
}


// Get the index of highest value preference
choice maxIndex(double &amp;P[Q]){
    choice maxI = 0;
    double max = 0;
    for (i : choice){
        if (P[i] &gt; max) {
            max = P[i];
            maxI = i;
        }
    }
    return maxI;
}

// Get next true value of boolean array A *after* index i.
// Returns -1 if there is no next value
optionalRobot getNextTrue(int i, bool &amp;A[R]){
    while (i &lt; R-1) {
        i++;
        if (A[i]) return i;
        
    }
    return -1;
}

//// ================================================
//// Meta

// Return true if all values are equal. Used for verification
bool allSameTimestamp(timestamp &amp;A[R]){
    timestamp comparison = A[0];
    return forall (i : int[1,R-1]) A[i] == comparison;
}

double Hk(robot r){
    double summ = 0.0;
    double p = 0.0;
    for(c : choice){
        p=fmax(P[r][c], FLT_MIN);
        summ = summ + -1*(p*log2(p));
    }
    return summ;
}

// Have a robot finished
bool done[R];
bool allDone = false;
bool sameCycle = false;
clock x = 0;
int cyclecounter;
double H[R];
double entropy;

///===================================================
///Used for syncronization:

/*When a robot has updated its preferences 
(will be set to false, when robot gets back to AwaitingNeighbours state, 
to await updating)*/
bool prefsUpdated[R];
/*When a robot has updated the size of its consensus-group 
(will be set to false, when robot has updated its preferences, 
once again having to update decision-group size)*/
bool DUpdated[R];


//--------------------------------------------------------------------------------------------------------------
////Depth-first search 

/*Depth first search for a single robot
A global stack is used for memory-reasons
Uses the global C-array for traversing robots in
the network*/

///array for visited robots
bool marked[R];

///fields for the stack
int list[R*R+1];
int len=0;



//----------------------------
//// Put an element at the top of the stack
//----------------------------
void push(int element)
{
        list[len] = element;
        len++;
}

//----------------------------
//// Remove the top of the stack and return it
//----------------------------
int pop()
{
        return list[--len];
}

//----------------------------
//// Returns the top element of the stack
//----------------------------
int front()
{
   return list[len - 1];
}

//----------------------------
//// Returns the bottom element of the stack
//----------------------------
int tail()
{
   return list[0];
}

bool isEmpty(){
    return len == 0;
}

//----------------------------
//// Empties stack
//----------------------------
void reset_stack()
{
    len = 0;
}

//----------------------------
////Performs Depth first search
//----------------------------
int dfs(int id) 
{    
    //variable for size of connected graph from the robot
    int groupSize = 0;

    //the current node in the traversal
    int current = id;

    //value for next node to check (set to dummy value)
    int next = -1;

    //the robot's stack is reset
    reset_stack();

    //source node pushed to stack
    push(current);

    //marked-array reset
    for(i : int[0,R-1]){
        marked[i] = false;
    }

    //until stack is empty, keep popping nodes, increment graph-size, and put neighbours on stack,
    //only if same leading preference as oneself
    while(!(isEmpty())) {
        current = pop();
        if(!marked[current]&amp;&amp;decision[current]==decision[id]) {
            marked[current] = true;
            groupSize++;
            for(i : int[0,R-1]) {
                next = C[current][i];
                if(next) { 
                    push(i);
                }
            }
        }
    }

    //number of traversed nodes (incl. source) returned
    return groupSize;
}
</declaration>
	<template>
		<name>Robot</name>
		<parameter>robot id</parameter>
		<declaration>//// =====================================================
//// State


optionalRobot neighbors[NN];           // Inverted index of neighbors, index 0 to count(C)-1 contains index of true values in C. -1 for empty slots.
bool mayContinue;                      // Guard and synchronization variable - is updated with compareCycle() and compareLevels()


choice s[Q];                           // s(1) shows the rank of choice 1 if choices were sorted according to this robots preferences.
double divergence;                     // The max total disagreement between this robot and its neighbors.

//// =====================================================
//// Methods
// Functions that are simplified by having access to state

    //// Utility

bool isInSameCycle(robot r)      { return cycle[r] == cycle[id]; }
bool isConsenting(robot r)       { return decision[r] == decision[id]; }
bool isRobot(optionalRobot r)    { return r != -1; }
bool isDone(robot r)             { return done[r]; }


/**Increment cycle by one and reset lower synchronization variables*/
void incrementCycle()            { 
    cycle[id] = (cycle[id] + 1) % 3; 
    cyclecounter++;
}


    //// Synchronization methods

/**Returns true if all robots are on the same cycle as self.*/
bool compareCycle() {
    for (r : robot) {
        if (!isInSameCycle(r)) { return false; }
    }
    return true;

}


/**Returns true if every other robot has updated their preference.*/
bool noOneBehindOne() {
    for (r : robot) {
        if (!prefsUpdated[r]) {  return false; }
    }
    return true;
}

/**Returns true if all other robots found the size of their decision group.*/
bool noOneBehindTwo() {
    for (r : robot) {
        if (!DUpdated[r]) {  return false; } 
    }
    return true;
}

    //// Updating and calculating preferences (P)

void sortPreferences(){
    bool mask[Q];
    for (c : choice) { mask[c] = true;}
    for (c : choice) {
        double maxV;
        choice maxI;
        for (d : choice) {
            if (mask[d] &amp;&amp; P[id][d] &gt; maxV) { 
                maxV = P[id][d]; 
                maxI = d;
            }
        }
        mask[maxI] = false;
        s[maxI] = c;
    }
    return;
}

///==========
///made as alternative to using D-array for finding agreeing neighbours
bool localConsensus(){
optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; !isConsenting(r)) {  return false; }
    }
    return true;
}
///===========

bool isLocallyConverged() {
    double max = 0;
    double temp;
    int[0,R] r;
    int[0,R] t;
    if (!localConsensus()){ return false; }
    for (r = 0; r &lt; R; r++) {
        for (t = r+1; t &lt; R; t++) {
            temp = 0;
            for (c : choice) {
                temp = temp + fabs(P[r][c] - P[t][c]);
            }
            if (temp &gt; max) { max = temp; }
        }
    }
    divergence = max;
    return max &lt; empirical;
}


double L(choice rank) {
    const double n = Q;
    double rankF = rank + 1.0;                                    // An int between 0 &amp; n, smaller should give higher result
    double Ll = (1.0 / n) * pow((divergence / empirical), 0.3);   // A number between 0 &amp; 1/Q
    double Lu = (2.0 / n) - Ll;                                   // A number between 1/Q &amp; 2/Q
    double result = (Ll * ((rankF - 1)/ (n-1))) + (Lu * ((n - rankF) / (n-1)));    
    return result;
}

void accelerateConvergence() {
    double psum = 0.0;
    sortPreferences();
    for (c : choice) {
        P[id][c] = P[id][c] * L(s[c]);
        psum = psum + P[id][c];
    }
    for (c : choice) {
        P[id][c] = (P[id][c] / psum);
    }

}

/**Updates the preferences of this robot according to the equation given in (Liu &amp; Lee, 2020)*/
/* Uses the last coherent state of each neighbor.*/
void updateP() {
    double sumP[Q];    // The sum of all neighbor's preference value for each choice (including self)
    int sumND;         // The total size of all neighbor's decision groups (including self)
    optionalRobot r;

    // First add yourself
    for (c : choice) {
        sumP[c] = sumP[c] + ND[id] * P[id][c];
    }
    sumND += ND[id];

    // Then add the each neighbor
    for (n : neighbor) {
        r = neighbors[n];
        if ( isRobot(r) ) {
            for (c : choice) {
                sumP[c] = sumP[c] + ND[r] * P[r][c];
            }
            sumND += ND[r];
        }
    }

    // Normalize
    for (c : choice) { P[id][c] = sumP[c] / sumND; } 
    
    // Determine local convergence
    if (empirical &gt; 0 &amp;&amp; isLocallyConverged()) {
        accelerateConvergence();
    }
}


    //// Initializations


// Create inverted Index of neighbors (neighbors array)
void initNeighbors() {
    optionalRobot nextNeighbor;
    nextNeighbor = getNextTrue(-1, C[id]);                    // Find first neighboring robot

    for (n : neighbor) {
        if (isRobot(nextNeighbor)) {
            neighbors[n] = nextNeighbor;                  // Save neighbor in neighbors
            nextNeighbor = getNextTrue(nextNeighbor, C[id]);  // Find next neighboring robot
        } else {
            neighbors[n] = -1;                            // If there are no more neighbors
        }
    }
}

// Initialize a robot with random preferences.
void initialize() {
    initP(P[id]);
    decision[id] = maxIndex(P[id]);
    initNeighbors();
    cycle[id] = 0;
    // Meta values
    cyclecounter = 0;
    allDone = false;
    done[id] = false;
    x = 0;
    sameCycle = false;
    ////addition for dfs:
    prefsUpdated[id] = true;
}
/*
// Initialize a robot with random preferences.
void initializeSeeding() {
    if (id &lt; SEEDNUM) { P = SEEDP;}
    else { initP(P[id]); }
    decision[id] = maxIndex(P[id]);
    initNeighbors();
    cycle[id] = 0;
    ////not needed in dfs for now
    //resetD();
    //level[id] = 1;
    // Meta values
    cyclecounter = 0;
    allDone = false;
    done[id] = false;
    x = 0;
    sameCycle = false;
    ////addition for dfs:
    prefsUpdated[id] = true;
}
*/</declaration>
		<location id="id0" x="-280" y="-289">
			<name x="-263" y="-306">Initial</name>
			<label kind="exponentialrate" x="-306" y="-297">1</label>
			<committed/>
		</location>
		<location id="id1" x="-178" y="-212">
			<name x="-144" y="-221">PreferencesUpdated</name>
			<label kind="exponentialrate" x="-178" y="-221">1</label>
		</location>
		<location id="id2" x="187" y="-85">
			<name x="204" y="-110">FindingDecisionGroup</name>
			<label kind="exponentialrate" x="187" y="-93">1</label>
		</location>
		<location id="id3" x="187" y="-331">
			<name x="204" y="-357">AwaitingNeighbors</name>
			<label kind="exponentialrate" x="187" y="-340">1</label>
		</location>
		<location id="id4" x="756" y="-331">
			<name x="746" y="-365">Terminal</name>
			<label kind="exponentialrate" x="748" y="-340">1</label>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="assignment" x="-59" y="-42">ND[id] = dfs(id),
DUpdated[id] = true</label>
			<nail x="42" y="-85"/>
			<nail x="42" y="34"/>
			<nail x="187" y="34"/>
		</transition>
		<transition id="id6">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="476" y="-323">ND[id] == R</label>
			<label kind="assignment" x="476" y="-306">done[id] = true,
allDone = count(done) == R ? 1 : 0,
sameCycle = allSameTimestamp(cycle)</label>
			<label kind="comments" x="476" y="-238">Verification updates</label>
		</transition>
		<transition id="id7">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-136" y="-399">compareCycle() &amp;&amp; ND[id] != R</label>
			<label kind="assignment" x="-136" y="-382">updateP(),
decision[id] = maxIndex(P[id]),
prefsUpdated[id] = true,
DUpdated[id] = false</label>
		</transition>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="195" y="-238">noOneBehindTwo()</label>
			<label kind="assignment" x="195" y="-221">incrementCycle(),
prefsUpdated[id] = false,
H[id] = Hk(id),
entropy = sum (r : robot) H[r]</label>
			<nail x="187" y="-102"/>
		</transition>
		<transition id="id9">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="8" y="-178">noOneBehindOne()</label>
		</transition>
		<transition id="id10">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-255" y="-289">initialize()</label>
		</transition>
	</template>
	<system>system Robot;
</system>
	<queries>
		<option key="--diagnostic" value="-1"/>
		<query>
			<formula>E[&lt;=30000; 100](max: cyclecounter / R)</formula>
			<comment>How many cycles is done before termination. (sums all cycles in cyclecounter and divide by no. of robots, R)</comment>
			<result outcome="success" type="quantity" value="6.14 ± 0.682137 (95% CI)" timestamp="2025-05-15 12:15:51 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>6.14 ± 0.682137 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: cyclecounter / R" yaxis="probability density">
					<series title="density" type="b(2.000000)" color="0x0000ff" encoding="csv">2.0,0.11
4.0,0.175
6.0,0.1
8.0,0.05
10.0,0.005
12.0,0.03
14.0,0.02
16.0,0.01
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.14,0.0
6.14,0.175
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 17]
Mean estimate of displayed sample: 6.14 ± 0.6821 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: cyclecounter / R" yaxis="probability">
					<series title="probability" type="b(2.000000)" color="0x0000ff" encoding="csv">2.0,0.22
4.0,0.35
6.0,0.2
8.0,0.1
10.0,0.01
12.0,0.06
14.0,0.04
16.0,0.02
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.14,0.0
6.14,0.35
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 17]
Mean estimate of displayed sample: 6.14 ± 0.6821 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: cyclecounter / R" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
4.0,0.22
6.0,0.57
8.0,0.77
10.0,0.87
12.0,0.88
14.0,0.94
16.0,0.98
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.14,0.0
6.14,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 17]
Mean estimate of displayed sample: 6.14 ± 0.6821 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: cyclecounter / R" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2.0,0.03621669264517642
4.0,0.31391965378631786
6.0,0.6686089833686168
8.0,0.8482683886989525
10.0,0.9289269538145705
12.0,0.9364310974388407
14.0,0.9776651139286836
16.0,0.9975686631760574
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2.0,0.0
4.0,0.14330357674981448
6.0,0.4671337383248463
8.0,0.6751412672248969
10.0,0.7879593229125502
12.0,0.7997643163800312
14.0,0.873970065419177
16.0,0.9296160675289299
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
4.0,0.22
6.0,0.57
8.0,0.77
10.0,0.87
12.0,0.88
14.0,0.94
16.0,0.98
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.14,0.0
6.14,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 17]
Mean estimate of displayed sample: 6.14 ± 0.6821 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: cyclecounter / R" yaxis="count">
					<series title="count" type="b(2.000000)" color="0x0000ff" encoding="csv">2.0,22.0
4.0,35.0
6.0,20.0
8.0,10.0
10.0,1.0
12.0,6.0
14.0,4.0
16.0,2.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.14,0.0
6.14,35.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 17]
Mean estimate of displayed sample: 6.14 ± 0.6821 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=30000; 100](max: x * (allDone ? 0 : 1) )</formula>
			<comment>What is the average maximum time-value in cases where all robots terminated.</comment>
			<result outcome="success" type="quantity" value="57.9182 ± 5.40469 (95% CI)" timestamp="2025-05-15 12:15:51 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>57.9182 ± 5.40469 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability density">
					<series title="density" type="b(14.370005)" color="0x0000ff" encoding="csv">14.932261513365154,0.006263045892392384
29.302266387402796,0.018789137677177152
43.672271261440436,0.01600556172500276
58.04227613547808,0.011134303808697572
72.41228100951572,0.006958939880435983
86.78228588355336,0.005567151904348786
101.152290757591,0.002087681964130795
115.52229563162864,0.0013917879760871965
129.8923005056663,6.958939880435983E-4
144.26230537970392,6.958939880435983E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">57.9182302960786,0.0
57.9182302960786,0.018789137677177156
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=14.37, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [14.93, 158.6]
Mean estimate of displayed sample: 57.92 ± 5.405 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="probability" type="b(14.370005)" color="0x0000ff" encoding="csv">14.932261513365154,0.09
29.302266387402796,0.27
43.672271261440436,0.23
58.04227613547808,0.16
72.41228100951572,0.1
86.78228588355336,0.08
101.152290757591,0.03
115.52229563162864,0.02
129.8923005056663,0.01
144.26230537970392,0.01
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">57.9182302960786,0.0
57.9182302960786,0.27
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=14.37, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [14.93, 158.6]
Mean estimate of displayed sample: 57.92 ± 5.405 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">14.932261513365154,0.0
29.302266387402796,0.09
43.672271261440436,0.36
58.04227613547808,0.59
72.41228100951572,0.75
86.78228588355336,0.85
101.152290757591,0.93
115.52229563162864,0.96
129.8923005056663,0.98
144.26230537970392,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">57.9182302960786,0.0
57.9182302960786,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=14.37, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [14.93, 158.6]
Mean estimate of displayed sample: 57.92 ± 5.405 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">14.932261513365154,0.03621669264517642
29.302266387402796,0.16398225502963523
43.672271261440436,0.46212189332742326
58.04227613547808,0.6873800234324292
72.41228100951572,0.8312202619006581
86.78228588355336,0.9135456143583515
101.152290757591,0.9713947110925613
115.52229563162864,0.9889955060138118
129.8923005056663,0.9975686631760574
144.26230537970392,0.9997468539670226
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">14.932261513365154,0.0
29.302266387402796,0.04198359562839223
43.672271261440436,0.26640842273323456
58.04227613547808,0.48714420376677087
72.41228100951572,0.6534475042411918
86.78228588355336,0.7646924998510451
101.152290757591,0.8610802715441427
115.52229563162864,0.9007428432873401
129.8923005056663,0.9296160675289299
144.26230537970392,0.9455406146079194
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">14.932261513365154,0.0
29.302266387402796,0.09
43.672271261440436,0.36
58.04227613547808,0.59
72.41228100951572,0.75
86.78228588355336,0.85
101.152290757591,0.93
115.52229563162864,0.96
129.8923005056663,0.98
144.26230537970392,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">57.9182302960786,0.0
57.9182302960786,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=14.37, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [14.93, 158.6]
Mean estimate of displayed sample: 57.92 ± 5.405 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: x * (allDone ? 0 : 1)" yaxis="count">
					<series title="count" type="b(14.370005)" color="0x0000ff" encoding="csv">14.932261513365154,9.0
29.302266387402796,27.0
43.672271261440436,23.0
58.04227613547808,16.0
72.41228100951572,10.0
86.78228588355336,8.0
101.152290757591,3.0
115.52229563162864,2.0
129.8923005056663,1.0
144.26230537970392,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">57.9182302960786,0.0
57.9182302960786,27.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=14.37, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [14.93, 158.6]
Mean estimate of displayed sample: 57.92 ± 5.405 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=30000; 100](&lt;&gt; sameCycle &amp;&amp; allDone)</formula>
			<comment>Checks that all robots are done and on the same cycle value within the bound.</comment>
			<result outcome="success" type="interval" value="≥ 0.963783 (95% CI)" timestamp="2025-05-15 12:15:51 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>≥ 0.963783 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(15.984778)" color="0x0000ff" encoding="csv">20.44945212144215,0.010009522553787994
36.43423053022347,0.021270235426799487
52.4190089390048,0.011260712873011494
68.4037873477861,0.007507141915340996
84.38856575656743,0.006881546755729246
100.37334416534875,0.0012511903192234993
116.35812257413008,0.001876785478835249
132.3429009829114,6.255951596117497E-4
148.32767939169273,0.0012511903192234993
164.31245780047402,6.255951596117497E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">61.46309916452651,0.0
61.46309916452651,0.021270235426799487
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.985, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.45, 180.3]
Mean estimate of displayed sample: 61.46 ± 6.363 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(15.984778)" color="0xa0a0ff" encoding="csv">20.44945212144215,0.24678759741086234
36.43423053022347,0.4415332677509589
52.4190089390048,0.2694770859668119
68.4037873477861,0.20023568361996882
84.38856575656743,0.1883011321964426
100.37334416534875,0.07038393247107012
116.35812257413008,0.08517605297428003
132.3429009829114,0.05445938539208066
148.32767939169273,0.07038393247107012
164.31245780047402,0.05445938539208066
					</series>
					<series title="lower limit" type="b(15.984778)" color="0x0000ff" encoding="csv">20.44945212144215,0.09431028997394622
36.43423053022347,0.2482235015448442
52.4190089390048,0.11031122915326055
68.4037873477861,0.0635689025611593
84.38856575656743,0.05620702028548746
100.37334416534875,0.0024313368239425423
116.35812257413008,0.006229971538306394
132.3429009829114,2.5314603297742064E-4
148.32767939169273,0.0024313368239425423
164.31245780047402,2.5314603297742064E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">61.46309916452651,0.0
61.46309916452651,0.02762210751125585
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.985, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.45, 180.3]
Mean estimate of displayed sample: 61.46 ± 6.363 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(15.984778)" color="0x0000ff" encoding="csv">20.44945212144215,0.16
36.43423053022347,0.34
52.4190089390048,0.18
68.4037873477861,0.12
84.38856575656743,0.11
100.37334416534875,0.02
116.35812257413008,0.03
132.3429009829114,0.01
148.32767939169273,0.02
164.31245780047402,0.01
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">61.46309916452651,0.0
61.46309916452651,0.34
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.985, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.45, 180.3]
Mean estimate of displayed sample: 61.46 ± 6.363 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(15.984778)" color="0xa0a0ff" encoding="csv">20.44945212144215,0.24678759741086234
36.43423053022347,0.4415332677509589
52.4190089390048,0.2694770859668119
68.4037873477861,0.20023568361996882
84.38856575656743,0.1883011321964426
100.37334416534875,0.07038393247107012
116.35812257413008,0.08517605297428003
132.3429009829114,0.05445938539208066
148.32767939169273,0.07038393247107012
164.31245780047402,0.05445938539208066
					</series>
					<series title="lower limit" type="b(15.984778)" color="0x0000ff" encoding="csv">20.44945212144215,0.09431028997394622
36.43423053022347,0.2482235015448442
52.4190089390048,0.11031122915326055
68.4037873477861,0.0635689025611593
84.38856575656743,0.05620702028548746
100.37334416534875,0.0024313368239425423
116.35812257413008,0.006229971538306394
132.3429009829114,2.5314603297742064E-4
148.32767939169273,0.0024313368239425423
164.31245780047402,2.5314603297742064E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">61.46309916452651,0.0
61.46309916452651,0.4415332677509589
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.985, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.45, 180.3]
Mean estimate of displayed sample: 61.46 ± 6.363 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">20.44945212144215,0.0
36.43423053022347,0.16
52.4190089390048,0.5
68.4037873477861,0.68
84.38856575656743,0.8
100.37334416534875,0.91
116.35812257413008,0.93
132.3429009829114,0.96
148.32767939169273,0.97
164.31245780047402,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">61.46309916452651,0.0
61.46309916452651,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.985, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.45, 180.3]
Mean estimate of displayed sample: 61.46 ± 6.363 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">20.44945212144215,0.03621669264517642
36.43423053022347,0.24678759741086234
52.4190089390048,0.601678870496699
68.4037873477861,0.769780083238423
84.38856575656743,0.8733444478980441
100.37334416534875,0.9580164043716077
116.35812257413008,0.9713947110925613
132.3429009829114,0.9889955060138118
148.32767939169273,0.9937700284616936
164.31245780047402,0.9997468539670226
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">20.44945212144215,0.0
36.43423053022347,0.09431028997394622
52.4190089390048,0.398321129503301
68.4037873477861,0.5792331383683774
84.38856575656743,0.7081573109113719
100.37334416534875,0.8360177449703647
116.35812257413008,0.8610802715441427
132.3429009829114,0.9007428432873401
148.32767939169273,0.91482394702572
164.31245780047402,0.9455406146079194
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">20.44945212144215,0.0
36.43423053022347,0.16
52.4190089390048,0.5
68.4037873477861,0.68
84.38856575656743,0.8
100.37334416534875,0.91
116.35812257413008,0.93
132.3429009829114,0.96
148.32767939169273,0.97
164.31245780047402,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">61.46309916452651,0.0
61.46309916452651,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.985, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.45, 180.3]
Mean estimate of displayed sample: 61.46 ± 6.363 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(15.984778)" color="0x0000ff" encoding="csv">20.44945212144215,16.0
36.43423053022347,34.0
52.4190089390048,18.0
68.4037873477861,12.0
84.38856575656743,11.0
100.37334416534875,2.0
116.35812257413008,3.0
132.3429009829114,1.0
148.32767939169273,2.0
164.31245780047402,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">61.46309916452651,0.0
61.46309916452651,34.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=15.985, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.45, 180.3]
Mean estimate of displayed sample: 61.46 ± 6.363 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=30000]([] allDone imply sameCycle) &gt;= 0.98</formula>
			<comment>Is it always the case (within the bound) that all robots being done implies that they are in the same cycle.</comment>
			<result outcome="success" type="quality" timestamp="2025-05-15 12:15:51 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=30000](&lt;&gt; allDone) &gt;= 0.98</formula>
			<comment>Does the probability that all robots eventually terminate exceed 0.98.
(Has the benefit of possibly needing fewer simulations than querying for the specific probability)</comment>
			<option key="--diagnostic" value="-1"/>
			<result outcome="success" type="quality" timestamp="2025-05-15 12:15:52 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=30000](&lt;&gt; Robot(0).Terminal) &gt;= 0.98</formula>
			<comment>Does the probability that Robot(0) terminates within the time-bound exceed 0.98.</comment>
			<option key="--diagnostic" value="-1"/>
			<result outcome="success" type="quality" timestamp="2025-05-15 12:15:52 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=51000; 100] { ND } : 1 :  !allDone &amp;&amp; (x &gt;= 50000)</formula>
			<comment>Counterexamples, should fail</comment>
			<result outcome="failure" type="interval" value="≤ 0.0362167 (95% CI)" timestamp="2025-05-15 12:15:52 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>≤ 0.0362167 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=30000; 100](&lt;&gt; allDone &amp;&amp; (decision[0] == 0))</formula>
			<comment>What is the probability that eventually all robots will be done, and robot 0 has choice 0 as leading preference.</comment>
			<result outcome="success" type="quantity" value="0.0273563 ± 0.0271031 (95% CI)" timestamp="2025-05-15 12:15:52 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>0.0273563 ± 0.0271031 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.000000)" color="0x0000ff" encoding="csv">40.74324147001409,4.503599627370496E13
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">40.74324147001409,0.0
40.74324147001409,4.503599627370496E13
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 100 in total, 1 (1%) displayed, 99 (99%) remaining
Displayed sample set: { 40.7432414700141 }</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.000000)" color="0xa0a0ff" encoding="csv">40.74324147001409,0.05445938539208066
					</series>
					<series title="lower limit" type="b(0.000000)" color="0x0000ff" encoding="csv">40.74324147001409,2.5314603297742064E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">40.74324147001409,0.0
40.74324147001409,2.452632677586007E14
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 100 in total, 1 (1%) displayed, 99 (99%) remaining
Displayed sample set: { 40.7432414700141 }</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.000000)" color="0x0000ff" encoding="csv">40.74324147001409,0.01
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">40.74324147001409,0.0
40.74324147001409,0.01
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 100 in total, 1 (1%) displayed, 99 (99%) remaining
Displayed sample set: { 40.7432414700141 }</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.000000)" color="0xa0a0ff" encoding="csv">40.74324147001409,0.05445938539208066
					</series>
					<series title="lower limit" type="b(0.000000)" color="0x0000ff" encoding="csv">40.74324147001409,2.5314603297742064E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">40.74324147001409,0.0
40.74324147001409,0.05445938539208066
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 100 in total, 1 (1%) displayed, 99 (99%) remaining
Displayed sample set: { 40.7432414700141 }</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">40.74324147001409,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">40.74324147001409,0.0
40.74324147001409,0.010000000000000009
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 100 in total, 1 (1%) displayed, 99 (99%) remaining
Displayed sample set: { 40.7432414700141 }</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">40.74324147001409,0.03621669264517642
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">40.74324147001409,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">40.74324147001409,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">40.74324147001409,0.0
40.74324147001409,0.010000000000000009
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 100 in total, 1 (1%) displayed, 99 (99%) remaining
Displayed sample set: { 40.7432414700141 }</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.000000)" color="0x0000ff" encoding="csv">40.74324147001409,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">40.74324147001409,0.0
40.74324147001409,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 100 in total, 1 (1%) displayed, 99 (99%) remaining
Displayed sample set: { 40.7432414700141 }</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=10000;100] {entropy} : 10 : allDone</formula>
			<comment>Monitors the entropy value of the first 10 runs out of 100 simulated runs that finishes within the bound.
This shows a general tendency of decreasing entropy, so has clear effect</comment>
			<result outcome="success" type="interval" value="≥ 0.691503 (95% CI)" timestamp="2025-05-15 12:15:52 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>≥ 0.691503 (95% CI)</details>
				<plot title="Simulations (10)" xaxis="time" yaxis="value">
					<series title="entropy" type="l" color="0xff0000" encoding="csv">0.0,0.0
2.903200330461074,0.0
3.1354212304052904,4.734684536746537
4.319072057569885,9.455641863672449
4.375168046768939,14.114156433994435
4.375168046768939,18.699895985280328
9.147948270076618,18.699895985280328
9.147948270076618,23.38355080730293
15.798056292434934,23.38355080730293
16.171875389627665,23.471130016640686
16.368582312624252,23.574229646244326
17.470972832136425,23.695300023783368
17.470972832136425,23.855928148966782
22.839987408592194,23.855928148966782
22.839987408592194,24.076072855312017
28.326203601780012,24.076072855312017
28.451634940133914,24.06682735401055
30.167899949133343,24.090710998908207
30.886651074526586,24.096938681527952
32.94720668650913,24.1057756310067
32.94720668650913,24.127747066140792
37.77055850710852,24.127747066140792
38.09936722012909,24.128717681974727
39.26429402561995,24.140347560551653
39.26429402561995,24.139400987749482
42.70629409286232,24.139400987749482
42.70629409286232,24.143856326402094
45.2718268742939,24.143856326402094
45.2718268742939,24.15009451426814
50.745306404228415,24.15009451426814
51.16577676643751,24.149371987777776
51.43560565178123,24.153655936553974
52.65233159748189,24.154810714348713
52.65233159748189,24.15624406391045
55.76621793543769,24.15624406391045
55.76621793543769,24.159636198145265
59.58775692817016,24.159636198145265
59.66099860240598,24.162322593429266
60.703786823822014,24.161919116130633
62.674587626250585,24.16235051165045
62.674587626250585,24.16242758067739
68.27762262997068,24.16242758067739
68.27762262997068,24.162714950633475
72.31280613216855,24.162714950633475
72.78127165665342,24.162690450961815
72.79220594848474,24.162949992455584
75.14588560226625,24.163242284822964
75.14588560226625,24.16459994538934
80.07754508268577,24.16459994538934
80.07754508268577,24.16447669654878
84.17996048019103,24.16447669654878
84.23452446520606,24.164131595221093
84.53590493957535,24.16440209076916
86.68109930232735,24.163775457235438
88.12688130623346,24.16459389312417
88.12688130623346,24.16493916761442
97.30766092580417,24.16493916761442
99.04338888557992,24.165138955083208
99.34690227464573,24.16529408502661
99.76875821184873,24.16576579184114
100.85169683483153,24.165603747625212
100.85169683483153,24.165045754749176
109.55614492398392,24.165045754749176
109.6191033678036,24.16521173709415
110.27690970701566,24.164800538144863
111.28800851773798,24.16443147679242
111.28800851773798,24.164610635272336
113.82799863005484,24.164610635272336
113.82799863005484,24.164925042453255
122.47179379521495,24.164925042453255
123.27904112561221,24.16503214562312
123.3286192724741,24.165185665705366
123.3286192724741,24.165326547626687
131.29554805347334,24.165326547626687
132.7304363546345,24.16501257608806
132.74746812386283,24.16411805050128
					</series>
					<series title="" type="l" color="0xff0909" encoding="csv">0.0,0.0
2.2144167300534656,0.0
2.748473786932964,4.60146546434088
2.753703597125647,9.095178051683185
3.616604710588993,13.544549918536731
4.265838951248689,18.159697289823693
4.265838951248689,22.77313668714013
7.9713261581572565,22.77313668714013
9.393266183982632,22.975733392070595
9.759315564295571,23.28123082574446
11.651326096061485,23.642730142341335
12.381643925320603,23.850084215160493
12.381643925320603,24.049792175411778
19.26374354124815,24.049792175411778
19.592121759453704,24.05568062152676
19.78710396145824,24.094882254293026
21.379796196478196,24.130706956652286
22.617418788944246,24.14210291744524
22.617418788944246,24.186323968542542
26.645115497486056,24.186323968542542
26.704214248044096,24.201847238354937
27.52484790903717,24.198407510846508
28.29937920171842,24.212243436443455
30.19553249162344,24.223687815159153
30.19553249162344,24.238365462034444
33.98028677756457,24.238365462034444
					</series>
					<series title="" type="l" color="0xff1212" encoding="csv">0.0,0.0
3.7838837243967403,0.0
3.854249479987652,4.602457344458514
4.816705080651175,9.40687189647274
5.741734963998879,14.070279408437415
7.343606184862973,18.67684841361512
7.343606184862973,23.2107062790091
14.588652144441319,23.2107062790091
14.774700658196531,23.34962667668749
15.329358403027408,23.621486880183323
15.420988997865752,23.6667985854469
15.92516934702233,23.90345918423346
15.92516934702233,23.99906699650008
25.04095807396294,23.99906699650008
25.529607662627697,24.006502400395693
27.39321909626367,24.03679918625663
29.605265107238328,24.076359441706806
29.605265107238328,24.166271378686645
32.211660191039776,24.166271378686645
32.211660191039776,24.169310604687702
43.89729896526172,24.169310604687702
44.13235415690481,24.20235764507553
44.78704677820099,24.216367348025564
44.94960012976421,24.216721818839837
45.09342404495376,24.21479750379089
45.09342404495376,24.22216069541458
51.0094881595685,24.22216069541458
51.04275447523029,24.222914744215046
51.749938875235074,24.224404041345288
52.988734370203574,24.223508773871735
52.988734370203574,24.23580525684587
57.982603397858355,24.23580525684587
57.982603397858355,24.241147698132057
63.2983099919375,24.241147698132057
65.15498740179898,24.247041256827973
65.28044772454189,24.246321433936398
66.07727777431231,24.24618315872733
66.07727777431231,24.24586584973229
76.27922778830606,24.24586584973229
76.27922778830606,24.247345233199603
82.569778664892,24.247345233199603
83.28344649026485,24.24993075598858
83.46830448830708,24.24985972873128
84.28016971494272,24.24975363282928
86.69110789852124,24.250439687686264
86.69110789852124,24.249711593741193
94.20382372929723,24.249711593741193
94.36074612167866,24.248960532044194
95.57983126880102,24.24940588546574
96.44835768210118,24.25123150836791
96.44835768210118,24.251152599308867
100.20951078739212,24.251152599308867
100.20951078739212,24.25010000495631
106.85117429485129,24.25010000495631
107.32220088765472,24.25023695909628
108.70305969615782,24.251031663036894
109.15650569881406,24.249588038623052
109.15650569881406,24.249489421643688
113.857971082942,24.249489421643688
116.22441862985451,24.248918449150413
					</series>
					<series title="" type="l" color="0xff1b1b" encoding="csv">0.0,0.0
5.836864040634148,0.0
6.6901997318595,4.527984978359987
6.724921072114059,9.21906151138343
7.3363489319508215,13.803264987083057
7.3363489319508215,18.471148662426913
13.002791066389603,18.471148662426913
13.002791066389603,23.085318084105744
16.83353805945507,23.085318084105744
17.064161145716973,23.27481386241187
18.121672181051803,23.411958519806177
18.22112841508707,23.532708122063084
18.22112841508707,23.768040162919444
20.765258325208034,23.768040162919444
20.765258325208034,23.960571757557982
26.507388181538076,23.960571757557982
27.077873997698564,23.954192484382595
27.6180915479482,23.96535999631884
28.769495085512602,23.99007515651221
30.366297871379555,24.01360150827493
30.366297871379555,24.06083487654742
40.1588540333468,24.06083487654742
40.97489253331762,24.080758688979188
41.52641762272012,24.07997533561697
43.100176558963724,24.072208785473077
43.100176558963724,24.07364759179708
45.961323039227224,24.07364759179708
46.89834876319997,24.08765104812718
					</series>
					<series title="" type="l" color="0xff2424" encoding="csv">0.0,0.0
2.122087525259764,0.0
2.911843692732908,4.652501090743475
4.090020223643691,9.379357605166962
4.347471076685678,13.88762259727281
5.744114676621961,18.58376062574833
5.744114676621961,23.309655686519946
15.413905251772192,23.309655686519946
15.910517170263523,23.453382534107067
16.51279296528506,23.49732452871583
16.539470170342522,23.585266289698183
17.625261871214043,23.646867484918417
17.625261871214043,23.912728348791934
22.65405292509818,23.912728348791934
23.011120591992448,23.927550718344236
23.0900911449036,23.95534189721974
24.991027344573734,23.974130013463622
24.991027344573734,23.984722961418043
27.850769242672147,23.984722961418043
27.850769242672147,23.995052983036217
32.227468123809345,23.995052983036217
32.642063995851714,23.993033820872654
32.90123917131715,24.00716121857834
34.189141880378834,24.009473331692373
34.611037503022,24.01133593987874
35.80218565728399,24.017530344919813
					</series>
					<series title="" type="l" color="0xff2d2d" encoding="csv">0.0,0.0
3.226647482264499,0.0
5.176789697914739,4.637731147001935
5.648428365043085,9.218624072340603
5.824588581183148,13.991897117079313
5.902828664792893,18.64697165493662
5.902828664792893,23.18399617119156
11.346693687006876,23.18399617119156
13.573520041985635,23.438550866782656
13.573520041985635,23.677337479474375
16.109019386472706,23.677337479474375
16.682359702002138,23.749522402296208
17.76527238709187,23.87361030222666
17.76527238709187,23.93634930758372
22.58408553064443,23.93634930758372
22.95303609724492,23.94173108576294
24.301482387744528,23.962329749837213
25.685461409078144,23.99395507149311
25.685461409078144,24.061597187462546
29.308889122234888,24.061597187462546
29.308889122234888,24.058171940529988
34.57816184327986,24.058171940529988
34.63136806175133,24.066645406642586
35.86517859238354,24.09471300722108
35.984107540371376,24.094225464486467
37.26020458961034,24.10198344772905
37.26020458961034,24.105389844630572
41.28641974489066,24.105389844630572
42.7317272594049,24.10745960292448
43.429778012175944,24.107271703517423
43.44477377634953,24.11020250387897
43.91663170956917,24.124612975564443
46.13009982125777,24.126175627752197
					</series>
					<series title="" type="l" color="0xff3636" encoding="csv">0.0,0.0
8.836646219676428,0.0
9.068438103109251,4.660772476056942
9.402803003213664,9.199397154688437
9.680252413057561,13.73316872611096
9.680252413057561,18.40836398930185
13.123335797126979,18.40836398930185
13.123335797126979,22.98517549675467
20.78068966218514,22.98517549675467
21.181502915751093,23.265804319771018
21.467990383068965,23.38559689125409
21.90118439253658,23.517090824285187
22.751927333207774,23.752163992315825
22.751927333207774,24.013342882042185
29.097229555654106,24.013342882042185
30.224739944852004,24.06080609893987
30.796593541767376,24.093991213558844
30.82586770740315,24.123603021585446
32.45770596850072,24.12659058020199
32.45770596850072,24.148985098426053
38.539928823315336,24.148985098426053
38.54532179299836,24.16308151636329
40.01334802848769,24.182565872199547
40.01334802848769,24.209108728249085
42.84199096511689,24.209108728249085
42.84199096511689,24.214895543653025
48.31195983001741,24.214895543653025
48.31195983001741,24.220927982600976
53.92353608391466,24.220927982600976
54.294625451440524,24.225069774138156
54.294625451440524,24.226510930550624
58.24408202667463,24.226510930550624
59.53206876617305,24.23014491034197
60.273230926637424,24.234863759606675
60.50020526356052,24.23662807227045
					</series>
					<series title="" type="l" color="0xff3e3e" encoding="csv">0.0,0.0
3.4127645804497186,0.0
4.0157118270243535,4.585362034709813
4.504497562394249,9.168441548675426
6.459956038828338,13.687561109579544
7.663665901544776,18.254057350233182
7.663665901544776,22.95846864494644
12.505999697792813,22.95846864494644
12.516573650116026,23.030166009159068
13.132081219086947,23.242504591579713
13.802630555422702,23.477270864066636
13.802630555422702,23.67350298802094
23.468855898745957,23.67350298802094
23.468855898745957,23.893243699676397
29.03708301394486,23.893243699676397
29.161838317769256,23.900458236130472
29.295203003301094,23.971235058913628
29.47444222091363,24.00545172071266
30.961786358826263,24.05279926469599
30.961786358826263,24.066662072446213
39.939084577374885,24.066662072446213
40.12123190270198,24.068959644515786
41.09073219145623,24.081100392642604
41.24900580566085,24.084958682764096
41.95008741444799,24.1267093481884
43.341382437321045,24.14687687536559
					</series>
					<series title="" type="l" color="0xff4747" encoding="csv">0.0,0.0
6.188600567918599,0.0
6.315710002977597,4.611215124521618
6.372661226573594,9.283810748127394
6.624831095229419,13.983818991762158
6.624831095229419,18.474092596222988
9.471799444526184,18.474092596222988
9.471799444526184,22.99994108859483
15.634555042246228,22.99994108859483
16.544705490743222,23.159736953654033
17.00065706929699,23.406435455826752
17.7112913180958,23.553363368618378
17.7112913180958,23.843826459680486
20.71440956576968,23.843826459680486
20.71440956576968,23.94043433470841
29.0836220877851,23.94043433470841
29.214538603636637,24.015553891318977
29.326708757015712,24.051579144736664
29.995189335492853,24.057037085387467
30.60803970641034,24.087032434536717
30.60803970641034,24.107662089023215
38.94040814057794,24.107662089023215
39.73275650912698,24.117517290930365
40.64135280334383,24.129139368361358
40.93340531768747,24.13897010481949
42.79999744116558,24.139372945208553
43.21443989151535,24.138831578076747
					</series>
					<series title="" type="l" color="0xff5050" encoding="csv">0.0,0.0
5.82437919821405,0.0
6.458023168901042,4.422594466510007
6.57522814988604,8.95260402291525
6.865992675631177,13.420991277034773
9.167595111905733,18.065155861354018
9.167595111905733,22.7800827467672
15.45089278480702,22.7800827467672
15.645299884136175,23.013318482187564
16.865832480924016,23.11040336440232
16.997915966119855,23.32096234495938
17.157141797133434,23.359246443432202
17.157141797133434,23.69450516182404
22.16189291301728,23.69450516182404
22.262998552458676,23.69932414213969
22.87585553362708,23.751518722321507
23.941344191860782,23.805757140615132
24.28414174906351,23.895670256373304
24.28414174906351,23.931609890355393
29.26895137008214,23.931609890355393
29.504543516336085,23.957867980325425
29.615668331234584,24.004046997238632
29.893796371819562,24.00299409305586
29.893796371819562,24.01303673661489
32.41024657948307,24.01303673661489
32.41024657948307,24.02401500214956
38.17286179767218,24.02401500214956
38.37663140504713,24.024685148982023
39.72374405401679,24.026879812598743
39.72374405401679,24.04145311168581
42.32194405674884,24.04145311168581
42.32194405674884,24.04964989913708
46.88198998143635,24.04964989913708
46.88198998143635,24.064474096211327
53.21552175268028,24.064474096211327
54.69305835331376,24.071200659937375
55.458644690764594,24.06832613600369
55.92559164692439,24.072457676199548
57.56262863476988,24.075627694354633
57.56262863476988,24.08292245642155
64.78013192536102,24.08292245642155
64.81135350272362,24.07975164174389
64.917453731428,24.079885787745297
67.2705371135779,24.082705534381525
67.40947049970978,24.088249234384485
67.56712628791077,24.086172594760917
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
