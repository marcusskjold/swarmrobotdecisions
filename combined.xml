<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>//// ================================================
//// Network and constants

// Maximally connected network

/*
const int R = 7;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 6;                      // Max number of neighbors
const double EMPIRICAL = 0.0;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true, true, true, true, true, true},
               {true, false, true, true, true, true, true},
               {true, true, false, true, true, true, true},
               {true, true, true, false, true, true, true},
               {true, true, true, true, false, true, true},
               {true, true, true, true, true, false, true},
               {true, true, true, true, true, true, false}};
*/

// Test network - medium size

const int Q = 10;
const int R = 10;
const int NN = 4;
const double EMPIRICAL = 0.0;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 3;
bool C[R][R] = {{false, true, true, true, false, false, false, false, true, false}, {true, false, true, false, false, false, true, true, false, false}, {true, true, false, true, true, false, false, false, false, false}, {true, false, true, false, true, true, false, false, false, false}, {false, false, true, true, false, true, false, false, true, false}, {false, false, false, true, true, false, true, false, false, false}, {false, true, false, false, false, true, false, true, false, true}, {false, true, false, false, false, false, true, false, true, true}, {true, false, false, false, true, false, false, true, false, true}, {false, false, false, false, false, false, true, true, true, false}};



// Minimally connected network of 7
/*
const int R = 7;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors
const double EMPIRICAL = 0.00;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true, false, false, false, false, false},
               {true, false, true, false, false, false, false},
               {false, true, false, true, false, false, false},
               {false, false, true, false, true, false, false},
               {false, false, false, true, false, true, false},
               {false, false, false, false, true, false, true},
               {false, false, false, false, false, true, false}};
*/


// Minimally connected network of 20
/*
const int R = 20;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors
const double EMPIRICAL = 100.00;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
                {true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
                {false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
                {false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
                {false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false, false},
                {false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false, false},
                {false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false, false},
                {false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false, false},
                {false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false, false},
                {false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false, false},
                {false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false, false},
                {false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false, false},
                {false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false, false},
                {false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false, false},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false, false},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false, false},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true,  false},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false, true},
                {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true,  false}};
*/

// Minimally connected network of 10

/*
const int R = 10;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors
const double EMPIRICAL = 0.0;
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true, false, false, false, false, false, false, false, false},
                {true, false, true, false, false, false, false, false, false, false},
                {false, true, false, true, false, false, false, false, false, false},
                {false, false, true, false, true, false, false, false, false, false},
                {false, false, false, true, false, true, false, false, false, false},
                {false, false, false, false, true, false, true, false, false, false},
                {false, false, false, false, false, true, false, true, false, false},
                {false, false, false, false, false, false, true, false, true, false},
                {false, false, false, false, false, false, false, true, false, true},
                {false, false, false, false, false, false, false, false, true, false}};

*/

// Circular network of 10
/*
const int R = 10;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors
const double EMPIRICAL = 1000.0;        // A high value here can lead to non-terminating processes
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true, false, false, false, false, false, false, false, true},
                {true, false, true, false, false, false, false, false, false, false},
                {false, true, false, true, false, false, false, false, false, false},
                {false, false, true, false, true, false, false, false, false, false},
                {false, false, false, true, false, true, false, false, false, false},
                {false, false, false, false, true, false, true, false, false, false},
                {false, false, false, false, false, true, false, true, false, false},
                {false, false, false, false, false, false, true, false, true, false},
                {false, false, false, false, false, false, false, true, false, true},
                {true, false, false, false, false, false, false, false, true, false}};
*/

// Large random graph similar to paper

/*
const int Q = 10;
const int R = 30;
const int NN = 6;
const double EMPIRICAL = 1000.0;
//double SEEDP[Q] = {0.5, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.1};
double SEEDP[Q] = {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
const int SEEDNUM = 0;

bool C[R][R] = {{false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false}, {true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false}, {false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false}, {true, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false}, {false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false}, {false, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false}, {false, false, false, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false}, {false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false}, {false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false}, {false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false}, {false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false}, {false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false}, {true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false}, {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false}, {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, false}};
*/

//// ================================================
//// Type definitions

typedef int[0,NN-1] neighbor;          // The set of possible neighbor indexes
typedef int[-1,NN-1] optionalNeighbor; // The set of possible neighbor indexes, -1 denoting null
typedef int[0,Q-1] choice;             // The set of choice indexes
typedef int[-1,Q-1] optionalChoice;    // The set of choice indexes
typedef int[0,R-1] robot;              // The set of robot ids
typedef int[-1,R-1] optionalRobot;     // The set of robot ids, -1 denoting null
typedef int[0,R+1] levels;

//// ================================================
//// Robot state

/* Most state is kept in global variables. 
However, a robot only ever accesses the state of its neighbors. 
In this we abstract away the specific communication protocal, while maintaining the requirement that robots have no global knowledge. */

/* The public decision of each robot. Is updated (along P), after publicP and ND but before any neighbor starts recalculating D */
choice decision[R];

/*The decision group of each robot - true means the robot of that ID is in the same group. Is continuously updated while in the calculateDsize state*/
bool D[R][R];

double P[R][Q];                           // Preferences as a PMF over all choices in Q.
double publicP[R][Q];                     /* The public preferences of each robot */

/* The public size of the consensus group of each robot. 
Is updated atomically, after having calculated D.
The paper calls this the consensus group, we call it the [D]ecision group 
This is to phonetically align the use of C and D for neighbors (connected robots) and consenting (same decision) respectively.*/
int[0,R] ND[R];

// Locking state
bool cycle[R];         // Used to synchronize cyclus among neighbors.
levels level[R];            // Synchronization while calculating D.

//// =================================================
//// Functions

// Populate array with random values summing to 1 (PMF)
void initP(double &amp;P[Q]){
    double rands[Q];
    double ssum = 0;
    for (i : choice) {
        double val = random(1);
        rands[i] = val;
        ssum = ssum + val;
    }
    for (i : choice) {
        P[i] = rands[i] / ssum;
    }
}

// Count the number of true values in array
int[0,R] count(bool &amp;A[R]){
    return sum (i : robot) A[i] == true;
}

bool isSubsetOf(bool &amp;A[R], bool &amp;B[R]) {
    return forall (r : robot) A[r] imply B[r];
}

// Get the index of a highest value
choice maxIndex(double &amp;P[Q]){
    choice maxI = 0;
    double max = 0;
    for (i : choice){
        if (P[i] &gt; max) {
            max = P[i];
            maxI = i;
        }
    }
    return maxI;
}

// Get next true value of boolean array A *after* index i.
// Returns -1 if there is no next value
optionalRobot getNextTrue(int i, bool &amp;A[R]){
    while (i &lt; R-1) {
        i++;
        if (A[i]) return i;
        
    }
    return -1;
}

//// ================================================
//// Meta

bool allSameCycle(){
    bool comparison = cycle[0];
    return forall (r : robot) cycle[r] == comparison;
}

double Hk(robot r){
    double summ = 0.0;
    double p = 0.0;
    for (c : choice) {
        p = fmax(P[r][c], FLT_MIN);
        summ = summ + -1 * (p * log2(p));
    }
    return summ;
}

// Have a robot finished
bool done[R];
bool allDone = false;
bool sameCycle = false;
clock x = 0;
int cyclecounter;
double H[R];
double entropy;

</declaration>
	<template>
		<name>Robot</name>
		<parameter>robot id</parameter>
		<declaration>//// =====================================================
//// State

optionalRobot neighbors[NN];           // Inverted index of neighbors, index 0 to count(C)-1 contains index of true values in C. -1 for empty slots.
choice s[Q];                           // If locally converged, s(1) shows the rank of choice 1 if choices were sorted according to this robots preferences.

//// =====================================================
//// Methods
// Functions that are simplified by having access to state

    //// Utility

bool isInSameCycle(robot r)      { return cycle[r] == cycle[id]; }
bool isConsenting(robot r)       { return decision[r] == decision[id]; }
bool isRobot(optionalRobot r)    { return r != -1; }
bool isLowerLevel(robot r)       { return level[r] &lt; level[id]; }
bool isDone(robot r)             { return done[r]; }


    //// Synchronization methods

/**Returns true if the all neighbors are on the same cycle as self.*/
bool allNeighsSameCycle() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (!isRobot(r)) {return true; } // All neighbors checked
        if (!isInSameCycle(r)) { return false; }
    }
    return true;

}

/**Returns true if no consenting neighbor is behind this robot in updating their D array.*/
/* This ensures that the robot does not ask a neighbor twice before that neighbor has a chance to update their values.
A neighbor can never be in an earlier cycle than this robot when compareLevels() is called.
This is because compareLevelsConsenting is only called in state `FindingDecisionGroup`.
Cycles are only incremented when entering state `AwaitingNeighbors`, and `AwaitingNeighbors` can only be exited when all neighbors are in the same or next cycle*/
bool noConNeighBehind() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (!isRobot(r)) {return true; } // All neighbors checked
        if (isConsenting(r) &amp;&amp; isInSameCycle(r) &amp;&amp; isLowerLevel(r)) {  return false; }
    }
    return true;
}

/**Returns true if every neighbor has updated their preference.*/
/* This ensures that the robot does not start calculating their Decision groups based on outdated information.
A neighbor can never be in an earlier cycle than this robot when compareLevels() is called.
This is because compareLevels is only called in state `PreferencesUpdated`.
Cycles are only incremented when entering state `AwaitingNeighbors`, and `AwaitingNeighbors` can only be exited when all neighbors are in the same or next cycle*/
bool noNeighBehind() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (!isRobot(r)) { return true; } // All neighbors checked
        if (isInSameCycle(r) &amp;&amp; isLowerLevel(r)) {  return false; }
    }
    return true;
}

    //// Updating and calculating preferences (P)

void sortPreferences(){
    bool mask[Q];
    for (c : choice) { mask[c] = true;}
    for (c : choice) {
        double maxV;
        choice maxI;
        for (d : choice) {
            if (mask[d] &amp;&amp; P[id][d] &gt; maxV) { 
                maxV = P[id][d]; 
                maxI = d;
            }
        }
        mask[maxI] = false;
        s[maxI] = c;
    }
    return;
}

double divergence() {
    double max = 0;
    double temp;
    int[0,R] r;
    int[0,R] t;
    if (!isSubsetOf(C[id], D[id])){ return false; }
    for (r = 0; r &lt; R; r++) {
        for (t = r+1; t &lt; R; t++) {
            temp = 0;
            for (c : choice) {
                temp = temp + fabs(publicP[r][c] - publicP[t][c]);
            }
            if (temp &gt; max) { max = temp; }
        }
    }
    return max;
}

double L(choice rank, double Ll, double Lu) {
    const double n = Q;
    double rankF = rank + 1.0;                                              // An int between 0 &amp; n, smaller should give higher result
    double result = (Ll * ((rankF - 1.0) / (n - 1.0))) + (Lu * ((n - rankF) / (n - 1.0)));    
    return result;
}

void accConvergence(double divergence) {
    double psum = 0.0;
    double Ll, Lu;
    sortPreferences();
    Ll = (1.0 / Q) * pow((divergence / EMPIRICAL), 0.3);   // A number between 0 &amp; 1/Q
    Lu = (2.0 / Q) - Ll;                                   // A number between 1/Q &amp; 2/Q

    for (c : choice) {
        P[id][c] = P[id][c] *  L(s[c], Ll, Lu);
        psum = psum + P[id][c];
    }
    for (c : choice) {
        P[id][c] = (P[id][c] / psum);
    }

}

/**Updates the preferences of this robot according to the equation given in (Liu &amp; Lee, 2020)*/
/* Uses the last coherent state of each neighbor.*/
void updateP() {
    double sumP[Q];    // The sum of all neighbor's preference value for each choice (including self)
    int sumND;         // The total size of all neighbor's decision groups (including self)
    optionalRobot r;
    double div;

    // First add yourself
    for (c : choice) {
        sumP[c] = sumP[c] + ND[id] * publicP[id][c];
    }
    sumND += ND[id];

    // Then add the each neighbor
    for (n : neighbor) {
        r = neighbors[n];
        if ( isRobot(r) ) {
            for (c : choice) {
                sumP[c] = sumP[c] + ND[r] * publicP[r][c];
            }
            sumND += ND[r];
        }
    }

    // Normalize
    for (c : choice) { P[id][c] = sumP[c] / sumND; } 

    // Determine local convergence
    if (EMPIRICAL &gt; 0) {
        div = divergence();
        if (div &lt; EMPIRICAL) {
            accConvergence(div);
        }
    }

}

    //// Calculating consensus / decision group (D)

/** Add every robot to the decision group (D) of this robot that are present
in the decision group of any neighbors with the same decision as this. s*/
void syncWithConsentingNeighbors() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (!isRobot(r)) {return; } // All neighbors checked
        if (isConsenting(r)) {
            for (s : robot) {
                D[id][s] = D[r][s] || D[id][s];     // Union operation
            }
        }
    }
}


    //// Initializations

// Resets the D array. 
void resetD() {
    for (r : robot) { D[id][r] = false; }
    D[id][id] = true;                      // A robot always agrees with itself
}

// Create inverted Index of neighbors (neighbors array)
void initNeighbors() {
    optionalRobot nextNeighbor;
    nextNeighbor = getNextTrue(-1, C[id]);                    // Find first neighboring robot

    for (n : neighbor) {
        if (isRobot(nextNeighbor)) {
            neighbors[n] = nextNeighbor;                  // Save neighbor in neighbors
            nextNeighbor = getNextTrue(nextNeighbor, C[id]);  // Find next neighboring robot
        } else {
            neighbors[n] = -1;                            // If there are no more neighbors
        }
    }
}

// Initialize a robot with random preferences.
void initialize() {
    if (id &lt; SEEDNUM) { P[id] = SEEDP; }
    else { initP(P[id]); }
    decision[id] = maxIndex(P[id]);
    ND[id] = 1;
    initNeighbors();
    cycle[id] = false;
    resetD();
    level[id] = 1;
    // Meta values // Verification
    cyclecounter = 0;
    allDone = false;
    done[id] = false;
    x = 0;
    sameCycle = false;
}

</declaration>
		<location id="id0" x="-76" y="17">
			<name x="-68" y="-17">Initial</name>
			<label kind="exponentialrate" x="-102" y="9">1</label>
			<committed/>
		</location>
		<location id="id1" x="-76" y="-85">
			<name x="-50" y="-102">PreferencesUpdated</name>
			<label kind="exponentialrate" x="-76" y="-94">1</label>
		</location>
		<location id="id2" x="187" y="-85">
			<name x="204" y="-110">FindingDecisionGroup</name>
			<label kind="exponentialrate" x="187" y="-93">1</label>
		</location>
		<location id="id3" x="187" y="-348">
			<name x="187" y="-399">AwaitingNeighbors</name>
			<label kind="exponentialrate" x="187" y="-357">1</label>
		</location>
		<location id="id4" x="459" y="-348">
			<name x="417" y="-382">Terminal</name>
			<label kind="exponentialrate" x="451" y="-357">1</label>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="212" y="-365">ND[id] == R</label>
			<label kind="assignment" x="212" y="-348">done[id] = true,
allDone = count(done) == R?1:0</label>
			<label kind="comments" x="212" y="-306">Verification updates</label>
		</transition>
		<transition id="id6">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-93" y="-382">allNeighsSameCycle() &amp;&amp; ND[id] != R</label>
			<label kind="assignment" x="-93" y="-365">updateP(),
decision[id] = maxIndex(P[id]),
resetD(),
level[id] = 1</label>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="195" y="-246">level[id] &gt; ND[id] || ND[id] == R</label>
			<label kind="assignment" x="195" y="-229">publicP[id] = P[id],
cycle[id] = !cycle[id],
cyclecounter++,
level[id] = 0,
H[id] = Hk(id),
entropy = sum (r : robot) H[r]</label>
			<nail x="187" y="-102"/>
		</transition>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="119" y="-51">noConNeighBehind() &amp;&amp; level[id] &lt;= ND[id]</label>
			<label kind="assignment" x="119" y="-34">syncWithConsentingNeighbors(),
level[id] = level[id] + 1,
ND[id] = count(D[id])</label>
			<nail x="212" y="-85"/>
			<nail x="212" y="-59"/>
			<nail x="144" y="-59"/>
			<nail x="144" y="-85"/>
		</transition>
		<transition id="id9">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-50" y="-85">noNeighBehind()</label>
		</transition>
		<transition id="id10">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-68" y="-42">initialize()</label>
		</transition>
	</template>
	<system>system Robot;
</system>
	<queries>
		<option key="--diagnostic" value="-1"/>
		<query>
			<formula>E[&lt;=3000; 100](max: cyclecounter / R)</formula>
			<comment>How many cycles in total does robot 0 go through before consensus is reached.

Results:
For 7 robots with random preferences in a fully connected graphs. [&lt;=1000;5000] ≈ 2 (as expected)</comment>
			<option key="--diagnostic" value="0"/>
			<result outcome="success" type="quantity" value="2.95 ± 0.0434629 (95% CI)" timestamp="2025-05-15 11:14:34 +0200">
				<option key="--diagnostic" value="0"/>
				<details>2.95 ± 0.0434629 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: cyclecounter / R" yaxis="probability density">
					<series title="density" type="b(1.000000)" color="0x0000ff" encoding="csv">2.0,0.05
3.0,0.95
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.95,0.0
2.95,0.95
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=2
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 3]
Mean estimate of displayed sample: 2.95 ± 0.043463 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: cyclecounter / R" yaxis="probability">
					<series title="probability" type="b(1.000000)" color="0x0000ff" encoding="csv">2.0,0.05
3.0,0.95
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.95,0.0
2.95,0.95
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=2
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 3]
Mean estimate of displayed sample: 2.95 ± 0.043463 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: cyclecounter / R" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
3.0,0.05
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.95,0.0
2.95,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=2
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 3]
Mean estimate of displayed sample: 2.95 ± 0.043463 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: cyclecounter / R" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2.0,0.03621669264517642
3.0,0.11283491110546276
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2.0,0.0
3.0,0.016431879182052158
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
3.0,0.05
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.95,0.0
2.95,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=2
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 3]
Mean estimate of displayed sample: 2.95 ± 0.043463 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: cyclecounter / R" yaxis="count">
					<series title="count" type="b(1.000000)" color="0x0000ff" encoding="csv">2.0,5.0
3.0,95.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.95,0.0
2.95,95.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=2
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 3]
Mean estimate of displayed sample: 2.95 ± 0.043463 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=3000; 100](max: x * (allDone ? 0 : 1) )</formula>
			<comment/>
			<result outcome="success" type="quantity" value="47.0118 ± 1.5851 (95% CI)" timestamp="2025-05-15 11:14:35 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>47.0118 ± 1.5851 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability density">
					<series title="density" type="b(4.454168)" color="0x0000ff" encoding="csv">20.699255294496158,0.006735264343960778
25.153423455972955,0.0022450881146535927
29.60759161744975,0.006735264343960778
34.06175977892654,0.0044901762293071855
38.515927940403344,0.035921409834457484
42.970096101880145,0.060617379095647
47.42426426335693,0.04714685040772545
51.87843242483373,0.044901762293071856
56.332600586310534,0.011225440573267964
60.78676874778732,0.0044901762293071855
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.01180352507594,0.0
47.01180352507594,0.060617379095647
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4542, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.7, 65.24]
Mean estimate of displayed sample: 47.01 ± 1.585 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="probability" type="b(4.454168)" color="0x0000ff" encoding="csv">20.699255294496158,0.03
25.153423455972955,0.01
29.60759161744975,0.03
34.06175977892654,0.02
38.515927940403344,0.16
42.970096101880145,0.27
47.42426426335693,0.21
51.87843242483373,0.2
56.332600586310534,0.05
60.78676874778732,0.02
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.01180352507594,0.0
47.01180352507594,0.27
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4542, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.7, 65.24]
Mean estimate of displayed sample: 47.01 ± 1.585 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">20.699255294496158,0.0
25.153423455972955,0.03
29.60759161744975,0.04
34.06175977892654,0.07
38.515927940403344,0.09
42.970096101880145,0.25
47.42426426335693,0.52
51.87843242483373,0.73
56.332600586310534,0.93
60.78676874778732,0.98
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.01180352507594,0.0
47.01180352507594,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4542, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.7, 65.24]
Mean estimate of displayed sample: 47.01 ± 1.585 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">20.699255294496158,0.03621669264517642
25.153423455972955,0.08517605297428003
29.60759161744975,0.09925715671265992
34.06175977892654,0.13891972845585734
38.515927940403344,0.16398225502963523
42.970096101880145,0.34655249575880825
47.42426426335693,0.6209945198220413
51.87843242483373,0.8139335777092593
56.332600586310534,0.9713947110925613
60.78676874778732,0.9975686631760574
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">20.699255294496158,0.0
25.153423455972955,0.006229971538306394
29.60759161744975,0.011004493986188203
34.06175977892654,0.028605288907438693
38.515927940403344,0.04198359562839223
42.970096101880145,0.16877973809934185
47.42426426335693,0.4177897654063067
51.87843242483373,0.6319837270910251
56.332600586310534,0.8610802715441427
60.78676874778732,0.9296160675289299
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">20.699255294496158,0.0
25.153423455972955,0.03
29.60759161744975,0.04
34.06175977892654,0.07
38.515927940403344,0.09
42.970096101880145,0.25
47.42426426335693,0.52
51.87843242483373,0.73
56.332600586310534,0.93
60.78676874778732,0.98
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.01180352507594,0.0
47.01180352507594,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4542, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.7, 65.24]
Mean estimate of displayed sample: 47.01 ± 1.585 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: x * (allDone ? 0 : 1)" yaxis="count">
					<series title="count" type="b(4.454168)" color="0x0000ff" encoding="csv">20.699255294496158,3.0
25.153423455972955,1.0
29.60759161744975,3.0
34.06175977892654,2.0
38.515927940403344,16.0
42.970096101880145,27.0
47.42426426335693,21.0
51.87843242483373,20.0
56.332600586310534,5.0
60.78676874778732,2.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.01180352507594,0.0
47.01180352507594,27.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4542, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.7, 65.24]
Mean estimate of displayed sample: 47.01 ± 1.585 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=3000; 100](&lt;&gt; allSameCycle() &amp;&amp; allDone)</formula>
			<comment>It would be nice to have the reverse query.
Within this time, how much time does it take at most to reach this state?
There should be a few edge cases where a robot takes one more cycle than the others. 
This is because of unknown interleavings that causes a single robot (seemingly a robot with only one neighbor) 
to not calculate their decision group size correctly at the first cycle where all robots agree.</comment>
			<result outcome="success" type="interval" value="≥ 0.963783 (95% CI)" timestamp="2025-05-15 11:14:36 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>≥ 0.963783 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(4.485380)" color="0x0000ff" encoding="csv">20.04976840455405,0.008917862233595865
24.53514830303575,0.006688396675196899
29.02052820151745,0.0
33.50590809999915,0.0
37.99128799848084,0.033441983375984495
42.476667896962546,0.06465450119357002
46.96204779544424,0.06019557007677209
51.447427693925945,0.01783572446719173
55.93280759240764,0.022294655583989662
60.41818749088934,0.008917862233595865
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">46.55249771200771,0.0
46.55249771200771,0.06465450119357002
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4854, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.05, 64.9]
Mean estimate of displayed sample: 46.55 ± 1.733 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(4.485380)" color="0xa0a0ff" encoding="csv">20.04976840455405,0.09925715671265992
24.53514830303575,0.08517605297428003
29.02052820151745,0.03621669264517642
33.50590809999915,0.03621669264517642
37.99128799848084,0.23530750014895488
42.476667896962546,0.3892659589074485
46.96204779544424,0.3680162729089749
51.447427693925945,0.15155763586442098
55.93280759240764,0.1762225977400227
60.41818749088934,0.09925715671265992
					</series>
					<series title="lower limit" type="b(4.485380)" color="0x0000ff" encoding="csv">20.04976840455405,0.011004493986188203
24.53514830303575,0.006229971538306394
29.02052820151745,0.0
33.50590809999915,0.0
37.99128799848084,0.08645438564164858
42.476667896962546,0.2035741892507319
46.96204779544424,0.18606642229074064
51.447427693925945,0.03517156251816281
55.93280759240764,0.04900468922148596
60.41818749088934,0.011004493986188203
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">46.55249771200771,0.0
46.55249771200771,0.08678550484413038
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4854, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.05, 64.9]
Mean estimate of displayed sample: 46.55 ± 1.733 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(4.485380)" color="0x0000ff" encoding="csv">20.04976840455405,0.04
24.53514830303575,0.03
29.02052820151745,0.0
33.50590809999915,0.0
37.99128799848084,0.15
42.476667896962546,0.29
46.96204779544424,0.27
51.447427693925945,0.08
55.93280759240764,0.1
60.41818749088934,0.04
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">46.55249771200771,0.0
46.55249771200771,0.29
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4854, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.05, 64.9]
Mean estimate of displayed sample: 46.55 ± 1.733 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(4.485380)" color="0xa0a0ff" encoding="csv">20.04976840455405,0.09925715671265992
24.53514830303575,0.08517605297428003
29.02052820151745,0.03621669264517642
33.50590809999915,0.03621669264517642
37.99128799848084,0.23530750014895488
42.476667896962546,0.3892659589074485
46.96204779544424,0.3680162729089749
51.447427693925945,0.15155763586442098
55.93280759240764,0.1762225977400227
60.41818749088934,0.09925715671265992
					</series>
					<series title="lower limit" type="b(4.485380)" color="0x0000ff" encoding="csv">20.04976840455405,0.011004493986188203
24.53514830303575,0.006229971538306394
29.02052820151745,0.0
33.50590809999915,0.0
37.99128799848084,0.08645438564164858
42.476667896962546,0.2035741892507319
46.96204779544424,0.18606642229074064
51.447427693925945,0.03517156251816281
55.93280759240764,0.04900468922148596
60.41818749088934,0.011004493986188203
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">46.55249771200771,0.0
46.55249771200771,0.3892659589074485
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4854, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.05, 64.9]
Mean estimate of displayed sample: 46.55 ± 1.733 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">20.04976840455405,0.0
24.53514830303575,0.04
29.02052820151745,0.07
33.50590809999915,0.07
37.99128799848084,0.07
42.476667896962546,0.22
46.96204779544424,0.51
51.447427693925945,0.78
55.93280759240764,0.86
60.41818749088934,0.96
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">46.55249771200771,0.0
46.55249771200771,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4854, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.05, 64.9]
Mean estimate of displayed sample: 46.55 ± 1.733 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">20.04976840455405,0.03621669264517642
24.53514830303575,0.09925715671265992
29.02052820151745,0.13891972845585734
33.50590809999915,0.13891972845585734
37.99128799848084,0.13891972845585734
42.476667896962546,0.31391965378631786
46.96204779544424,0.6113558348383622
51.447427693925945,0.8566964232501856
55.93280759240764,0.9212945950730342
60.41818749088934,0.9889955060138118
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">20.04976840455405,0.0
24.53514830303575,0.011004493986188203
29.02052820151745,0.028605288907438693
33.50590809999915,0.028605288907438693
37.99128799848084,0.028605288907438693
42.476667896962546,0.14330357674981448
46.96204779544424,0.4080363291554537
51.447427693925945,0.6860803462136822
55.93280759240764,0.7762720186294323
60.41818749088934,0.9007428432873401
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">20.04976840455405,0.0
24.53514830303575,0.04
29.02052820151745,0.07
33.50590809999915,0.07
37.99128799848084,0.07
42.476667896962546,0.22
46.96204779544424,0.51
51.447427693925945,0.78
55.93280759240764,0.86
60.41818749088934,0.96
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">46.55249771200771,0.0
46.55249771200771,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4854, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.05, 64.9]
Mean estimate of displayed sample: 46.55 ± 1.733 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(4.485380)" color="0x0000ff" encoding="csv">20.04976840455405,4.0
24.53514830303575,3.0
29.02052820151745,0.0
33.50590809999915,0.0
37.99128799848084,15.0
42.476667896962546,29.0
46.96204779544424,27.0
51.447427693925945,8.0
55.93280759240764,10.0
60.41818749088934,4.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">46.55249771200771,0.0
46.55249771200771,29.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4.4854, bucket count=10
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.05, 64.9]
Mean estimate of displayed sample: 46.55 ± 1.733 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=3000]([] allDone imply allSameCycle()) &gt;= 0.98</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-15 11:14:36 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=3000](&lt;&gt; allDone) &gt;= 0.98</formula>
			<comment/>
			<option key="--diagnostic" value="-1"/>
			<result outcome="success" type="quality" timestamp="2025-05-15 11:14:37 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000](&lt;&gt; Robot(0).Terminal) &gt;= 0.98</formula>
			<comment/>
			<option key="--diagnostic" value="-1"/>
			<result outcome="success" type="quality" timestamp="2025-05-15 11:14:38 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=4000; 200] { ND } : 1 :  !allDone &amp;&amp; (x &gt;= 3000)</formula>
			<comment>Counterexamples, should fail</comment>
			<result outcome="failure" type="interval" value="≤ 0.0182753 (95% CI)" timestamp="2025-05-15 11:14:39 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>≤ 0.0182753 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=3000; 500](&lt;&gt; allDone &amp;&amp; (decision[0] == 0))</formula>
			<comment/>
			<result outcome="success" type="interval" value="≥ 0.992649 (95% CI)" timestamp="2025-05-15 11:14:42 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>≥ 0.992649 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(1.926603)" color="0x0000ff" encoding="csv">20.592439069300028,0.004152386658768074
22.5190419262636,0.00726667665284413
24.445644783227173,0.004152386658768074
26.37224764019075,0.004152386658768074
28.298850497154323,0.0010380966646920185
30.225453354117896,0.0
32.15205621108147,0.002076193329384037
34.07865906804504,0.0010380966646920185
36.00526192500862,0.005190483323460093
37.931864781972195,0.019723836629148353
39.858467638935764,0.025952416617300463
41.78507049589933,0.04775244657583286
43.71167335286291,0.07059057319905726
45.638276209826486,0.06747628320498121
47.564879066790056,0.0612477032168291
49.49148192375363,0.051904833234600926
51.41808478071721,0.053981026563984964
53.34468763768078,0.03010480327606854
55.271290494644354,0.020761933293840372
57.197893351607924,0.019723836629148353
59.1244962085715,0.010380966646920186
61.05109906553507,0.005190483323460093
62.977701922498646,0.005190483323460093
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.421358344726464,0.0
47.421358344726464,0.07059057319905727
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1.9266, bucket count=23
Runs: 500 in total, 500 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.592, 64.904]
Mean estimate of displayed sample: 47.421 ± 0.64085 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(1.926603)" color="0xa0a0ff" encoding="csv">20.592439069300028,0.02035563259374393
22.5190419262636,0.028631616183336057
24.445644783227173,0.02035563259374393
26.37224764019075,0.02035563259374393
28.298850497154323,0.011092476898968789
30.225453354117896,0.007350610051907787
32.15205621108147,0.01437407856220031
34.07865906804504,0.011092476898968789
36.00526192500862,0.023181388069659643
37.931864781972195,0.058707290463228555
39.858467638935764,0.07292762165047896
41.78507049589933,0.12080703261074258
43.71167335286291,0.16920335862136804
45.638276209826486,0.16267648193700152
47.564879066790056,0.14956039631572743
49.49148192375363,0.1297090856622031
51.41808478071721,0.13414074842248078
53.34468763768078,0.0822382208938353
55.271290494644354,0.061102609388244696
57.197893351607924,0.058707290463228555
59.1244962085715,0.03647240829220974
61.05109906553507,0.023181388069659643
62.977701922498646,0.023181388069659643
					</series>
					<series title="lower limit" type="b(1.926603)" color="0x0000ff" encoding="csv">20.592439069300028,0.0021839081083421838
22.5190419262636,0.00564676107032443
24.445644783227173,0.0021839081083421838
26.37224764019075,0.0021839081083421838
28.298850497154323,5.0634334007415215E-5
30.225453354117896,0.0
32.15205621108147,4.847861762900009E-4
34.07865906804504,5.0634334007415215E-5
36.00526192500862,0.003254721407024252
37.931864781972195,0.023030770806247602
39.858467638935764,0.032615180149330056
41.78507049589933,0.0681433041566544
43.71167335286291,0.10718032585698822
45.638276209826486,0.10178293283994648
47.564879066790056,0.09105167717278684
49.49148192375363,0.0751358150664255
51.41808478071721,0.07865193527463434
53.34468763768078,0.039183868797187785
55.271290494644354,0.024601312085545397
57.197893351607924,0.023030770806247602
59.1244962085715,0.009631429586433348
61.05109906553507,0.003254721407024252
62.977701922498646,0.003254721407024252
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.421358344726464,0.0
47.421358344726464,0.08782472111976485
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1.9266, bucket count=23
Runs: 500 in total, 500 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.592, 64.904]
Mean estimate of displayed sample: 47.421 ± 0.64085 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(1.926603)" color="0x0000ff" encoding="csv">20.592439069300028,0.008
22.5190419262636,0.014
24.445644783227173,0.008
26.37224764019075,0.008
28.298850497154323,0.002
30.225453354117896,0.0
32.15205621108147,0.004
34.07865906804504,0.002
36.00526192500862,0.01
37.931864781972195,0.038
39.858467638935764,0.05
41.78507049589933,0.092
43.71167335286291,0.136
45.638276209826486,0.13
47.564879066790056,0.118
49.49148192375363,0.1
51.41808478071721,0.104
53.34468763768078,0.058
55.271290494644354,0.04
57.197893351607924,0.038
59.1244962085715,0.02
61.05109906553507,0.01
62.977701922498646,0.01
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.421358344726464,0.0
47.421358344726464,0.136
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1.9266, bucket count=23
Runs: 500 in total, 500 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.592, 64.904]
Mean estimate of displayed sample: 47.421 ± 0.64085 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(1.926603)" color="0xa0a0ff" encoding="csv">20.592439069300028,0.02035563259374393
22.5190419262636,0.028631616183336057
24.445644783227173,0.02035563259374393
26.37224764019075,0.02035563259374393
28.298850497154323,0.011092476898968789
30.225453354117896,0.007350610051907787
32.15205621108147,0.01437407856220031
34.07865906804504,0.011092476898968789
36.00526192500862,0.023181388069659643
37.931864781972195,0.058707290463228555
39.858467638935764,0.07292762165047896
41.78507049589933,0.12080703261074258
43.71167335286291,0.16920335862136804
45.638276209826486,0.16267648193700152
47.564879066790056,0.14956039631572743
49.49148192375363,0.1297090856622031
51.41808478071721,0.13414074842248078
53.34468763768078,0.0822382208938353
55.271290494644354,0.061102609388244696
57.197893351607924,0.058707290463228555
59.1244962085715,0.03647240829220974
61.05109906553507,0.023181388069659643
62.977701922498646,0.023181388069659643
					</series>
					<series title="lower limit" type="b(1.926603)" color="0x0000ff" encoding="csv">20.592439069300028,0.0021839081083421838
22.5190419262636,0.00564676107032443
24.445644783227173,0.0021839081083421838
26.37224764019075,0.0021839081083421838
28.298850497154323,5.0634334007415215E-5
30.225453354117896,0.0
32.15205621108147,4.847861762900009E-4
34.07865906804504,5.0634334007415215E-5
36.00526192500862,0.003254721407024252
37.931864781972195,0.023030770806247602
39.858467638935764,0.032615180149330056
41.78507049589933,0.0681433041566544
43.71167335286291,0.10718032585698822
45.638276209826486,0.10178293283994648
47.564879066790056,0.09105167717278684
49.49148192375363,0.0751358150664255
51.41808478071721,0.07865193527463434
53.34468763768078,0.039183868797187785
55.271290494644354,0.024601312085545397
57.197893351607924,0.023030770806247602
59.1244962085715,0.009631429586433348
61.05109906553507,0.003254721407024252
62.977701922498646,0.003254721407024252
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.421358344726464,0.0
47.421358344726464,0.16920335862136804
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1.9266, bucket count=23
Runs: 500 in total, 500 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.592, 64.904]
Mean estimate of displayed sample: 47.421 ± 0.64085 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">20.592439069300028,0.0
22.5190419262636,0.008
24.445644783227173,0.022
26.37224764019075,0.03
28.298850497154323,0.038
30.225453354117896,0.04
32.15205621108147,0.04
34.07865906804504,0.044
36.00526192500862,0.046
37.931864781972195,0.056
39.858467638935764,0.094
41.78507049589933,0.144
43.71167335286291,0.236
45.638276209826486,0.372
47.564879066790056,0.502
49.49148192375363,0.62
51.41808478071721,0.72
53.34468763768078,0.824
55.271290494644354,0.882
57.197893351607924,0.922
59.1244962085715,0.96
61.05109906553507,0.98
62.977701922498646,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.421358344726464,0.0
47.421358344726464,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1.9266, bucket count=23
Runs: 500 in total, 500 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.592, 64.904]
Mean estimate of displayed sample: 47.421 ± 0.64085 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">20.592439069300028,0.007350610051907787
22.5190419262636,0.02035563259374393
24.445644783227173,0.039022550844808795
26.37224764019075,0.04899822570881895
28.298850497154323,0.058707290463228555
30.225453354117896,0.061102609388244696
32.15205621108147,0.061102609388244696
34.07865906804504,0.06586100032359485
36.00526192500862,0.0682254278812379
37.931864781972195,0.0799213006043601
39.858467638935764,0.1230376078895607
41.78507049589933,0.17787610802552098
43.71167335286291,0.27571918023327546
45.638276209826486,0.4160229977417723
47.564879066790056,0.5467021930810041
49.49148192375363,0.6627260377078633
51.41808478071721,0.758955083477832
53.34468763768078,0.8563814050773387
55.271290494644354,0.9089483228272132
57.197893351607924,0.9439488262244397
59.1244962085715,0.9753986879144546
61.05109906553507,0.9903685704135666
62.977701922498646,0.9967452785929758
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">20.592439069300028,0.0
22.5190419262636,0.0021839081083421838
24.445644783227173,0.011032276361257528
26.37224764019075,0.01688598420387324
28.298850497154323,0.023030770806247602
30.225453354117896,0.024601312085545397
32.15205621108147,0.024601312085545397
34.07865906804504,0.027776767285571744
36.00526192500862,0.029380175392402792
37.931864781972195,0.037530444475022184
39.858467638935764,0.06988623391878117
41.78507049589933,0.11440713117916824
43.71167335286291,0.1994352969849772
45.638276209826486,0.3295002563949794
47.564879066790056,0.4572740294438495
49.49148192375363,0.5758460890440275
51.41808478071721,0.6784209332693435
53.34468763768078,0.7877324296532344
55.271290494644354,0.8504396036842726
57.197893351607924,0.8949122735699343
59.1244962085715,0.9388973906117553
61.05109906553507,0.9635275917077902
62.977701922498646,0.9768186119303404
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">20.592439069300028,0.0
22.5190419262636,0.008
24.445644783227173,0.022
26.37224764019075,0.03
28.298850497154323,0.038
30.225453354117896,0.04
32.15205621108147,0.04
34.07865906804504,0.044
36.00526192500862,0.046
37.931864781972195,0.056
39.858467638935764,0.094
41.78507049589933,0.144
43.71167335286291,0.236
45.638276209826486,0.372
47.564879066790056,0.502
49.49148192375363,0.62
51.41808478071721,0.72
53.34468763768078,0.824
55.271290494644354,0.882
57.197893351607924,0.922
59.1244962085715,0.96
61.05109906553507,0.98
62.977701922498646,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.421358344726464,0.0
47.421358344726464,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1.9266, bucket count=23
Runs: 500 in total, 500 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.592, 64.904]
Mean estimate of displayed sample: 47.421 ± 0.64085 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(1.926603)" color="0x0000ff" encoding="csv">20.592439069300028,4.0
22.5190419262636,7.0
24.445644783227173,4.0
26.37224764019075,4.0
28.298850497154323,1.0
30.225453354117896,0.0
32.15205621108147,2.0
34.07865906804504,1.0
36.00526192500862,5.0
37.931864781972195,19.0
39.858467638935764,25.0
41.78507049589933,46.0
43.71167335286291,68.0
45.638276209826486,65.0
47.564879066790056,59.0
49.49148192375363,50.0
51.41808478071721,52.0
53.34468763768078,29.0
55.271290494644354,20.0
57.197893351607924,19.0
59.1244962085715,10.0
61.05109906553507,5.0
62.977701922498646,5.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">47.421358344726464,0.0
47.421358344726464,68.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1.9266, bucket count=23
Runs: 500 in total, 500 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [20.592, 64.904]
Mean estimate of displayed sample: 47.421 ± 0.64085 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=100000; 100] { entropy } : 10 : !allDone &amp;&amp; (x &gt;= 100000 || cyclecounter &gt;= 32767)</formula>
			<comment>For inspecting entropy in extreme cases - finding examples of non-successful convergence.</comment>
			<result outcome="failure" type="interval" value="≤ 0.0362167 (95% CI)" timestamp="2025-05-15 11:14:43 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>≤ 0.0362167 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=3000; 100] { entropy } : 10 : allDone</formula>
			<comment>For inspecting entropy in normal cases</comment>
		</query>
	</queries>
</nta>
