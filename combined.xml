<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>

//// ================================================
//// Constants and type definition

// Maximally connected network
/*
const int R = 7;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 6;                      // Max number of neighbors

bool C[R][R] = {{false, true, true, true, true, true, true},
               {true, false, true, true, true, true, true},
               {true, true, false, true, true, true, true},
               {true, true, true, false, true, true, true},
               {true, true, true, true, false, true, true},
               {true, true, true, true, true, false, true},
               {true, true, true, true, true, true, false}};
*/

// Minimally connected network of 7
/*
const int R = 7;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors

bool C[R][R] = {{false, true, false, false, false, false, false},
               {true, false, true, false, false, false, false},
               {false, true, false, true, false, false, false},
               {false, false, true, false, true, false, false},
               {false, false, false, true, false, true, false},
               {false, false, false, false, true, false, true},
               {false, false, false, false, false, true, false}};
*/


// Minimally connected network of 10
/* Edge cases appear here, where one robot ends up not registering that it has a full decision group,
while every other robot does, and so they end up in the terminal state, and the final robot gets stuck.
Our theory is that this is because a robot with only one neighbor has bad access to information.
The problem is easily fixed by adding a check for robots being done. */
/*
const int R = 10;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors

bool C[R][R] = {{false, true, false, false, false, false, false, false, false, false},
                {true, false, true, false, false, false, false, false, false, false},
                {false, true, false, true, false, false, false, false, false, false},
                {false, false, true, false, true, false, false, false, false, false},
                {false, false, false, true, false, true, false, false, false, false},
                {false, false, false, false, true, false, true, false, false, false},
                {false, false, false, false, false, true, false, true, false, false},
                {false, false, false, false, false, false, true, false, true, false},
                {false, false, false, false, false, false, false, true, false, true},
                {false, false, false, false, false, false, false, false, true, false}};
*/

// Circular network of 10
/* The edge cases described (2025-04-30) do not appear.
This supports our theory that the edge cases only appear for robots with just one neighbor.
*/
/*
const int R = 10;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors

bool C[R][R] = {{false, true, false, false, false, false, false, false, false, true},
                {true, false, true, false, false, false, false, false, false, false},
                {false, true, false, true, false, false, false, false, false, false},
                {false, false, true, false, true, false, false, false, false, false},
                {false, false, false, true, false, true, false, false, false, false},
                {false, false, false, false, true, false, true, false, false, false},
                {false, false, false, false, false, true, false, true, false, false},
                {false, false, false, false, false, false, true, false, true, false},
                {false, false, false, false, false, false, false, true, false, true},
                {true, false, false, false, false, false, false, false, true, false}};
*/

// Large random graph similar to paper
const int Q = 10;
const int R = 30;
const int NN = 6;

bool C[R][R] = {{false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false}, {true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false}, {false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false}, {true, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false}, {false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false}, {false, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false}, {false, false, false, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false}, {false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false}, {false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false}, {false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false}, {false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false}, {false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false}, {true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, false}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false}, {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false}, {true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true}, {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, false}};


typedef int[0,NN-1] neighbor;          // The set of possible neighbor indexes
typedef int[-1,NN-1] optionalNeighbor; // The set of possible neighbor indexes, -1 denoting null
typedef int[0,2] timestamp;            // Synchronization following rock-paper-scissors logic ( 0 &lt; 1 &lt; 2 &lt; 0 )
typedef int[0,Q-1] choice;             // The set of choice indexes
typedef int[-1,Q-1] optionalChoice;    // The set of choice indexes
typedef int[0,R-1] robot;              // The set of robot ids
typedef int[-1,R-1] optionalRobot;     // The set of robot ids, -1 denoting null
typedef int[0,3] calmness;

//// ================================================
//// Robot state

/* Most state is kept in global variables. 
However, a robot only ever accesses the state of its neighbors. 
In this we abstract away the specific communication protocal, while maintaining the requirement that robots have no global knowledge. */


/* The public decision of each robot. Is updated (along P), after publicP and ND but before any neighbor starts recalculating D */
choice decision[R];

/*The decision group of each robot - true means the robot of that ID is in the same group. Is continuously updated while in the calculateDsize state*/
bool D[R][R];

/* The public preferences of each robot - the preferences are only updated simultaneously with ND */
double publicP[R][Q];

/* The public size of the donsensus group of each robot. 
Is updated atomically, after having calculated D.
The paper calls this the consensus group, we call it the [D]ecision group 
This is to phonetically align the use of C and D for neighbors (connected robots) and consenting (same decision) respectively.*/
int[0,R] ND[R];

/* The reason why some fields are updated atomically and others continuously is because they are used for different purposes:
publicP and ND are used when updating neighboring robots preferences, and so they should represent the last coherent state.
D is used for propagating information to calculate ND, and so it updates continuously.
decision is determined right after P is updated. */

// Locking state
timestamp cycle[R];        // Used to synchronize cyclus.
timestamp level[R];        // Synchronization while calculating D.
calmness calm[R];         // Used for determining when D has been calculated.

//// =================================================
//// Functions

// Timestamps

// Returns true if the timestamp of robot r is behind or at equal to that of robot s. False if r is in front.
bool compareTimestamps(timestamp a, timestamp b) {
    if (a == b) return true;
    if ((a + 1) % 3 == b) return true;
    return false;
}

// Populate array with random values summing to 1 (PMF)
void initP(double &amp;P[Q]){
    double rands[Q];
    double ssum = 0;
    for (i : choice) {
        double val = random(1);
        rands[i] = val;
        ssum = ssum + val;
    }
    for (i : choice) {
        P[i] = rands[i] / ssum;
    }
}

// Count the number of true values in array
int[0,R] count(bool &amp;A[R]){
    return sum (i : robot) A[i] == true;
}

// Get the index of a highest value
choice maxIndex(double &amp;P[Q]){
    choice maxI = 0;
    double max = 0;
    for (i : choice){
        if (P[i] &gt; max) {
            max = P[i];
            maxI = i;
        }
    }
    return maxI;
}

// Get next true value of boolean array A *after* index i.
// Returns -1 if there is no next value
optionalRobot getNextTrue(int i, bool &amp;A[R]){
    while (i &lt; R-1) {
        i++;
        if (A[i]) return i;
        
    }
    return -1;
}

//// ================================================
//// Meta

// Return true if all values are equal. Used for verification
bool allSameTimestamp(timestamp &amp;A[R]){
    timestamp comparison = A[0];
    return forall (i : int[1,R-1]) A[i] == comparison;
}

// Have a robot finished
bool done[R];
bool allDone = false;
bool sameCycle = false;
clock x = 0;
int cyclecounter[R];</declaration>
	<template>
		<name>Robot</name>
		<parameter>robot id</parameter>
		<declaration>//// =====================================================
//// State

optionalRobot neighbors[NN];           // Inverted index of neighbors, index 0 to count(C)-1 contains index of true values in C. -1 for empty slots.
bool mayContinue;                      // Guard and synchronization variable - is updated with compareCycle() and compareLevels()
double P[Q];                           // Preferences as a PMF over all choices in Q.
bool wasUpdated;

//// =====================================================
//// Methods
// Functions that are simplified by having access to state

    //// Utility

bool isInSameCycle(robot r)      { return cycle[r] == cycle[id]; }
bool isConsenting(robot r)       { return decision[r] == decision[id]; }
bool isRobot(optionalRobot r)    { return r != -1; }
bool isCalm(robot r)             { return calm[r] &gt; 1; }
bool isLowerLevel(robot r)       { return !compareTimestamps(level[id], level[r]); }
bool isInEarlierCycle(robot r)   { return !compareTimestamps(cycle[id], cycle[r]); }
bool isDone(robot r)             { return done[r]; }
void incrementLevel()            { level[id] = (level[id] + 1) % 3; }

/**Increment cycle by one and reset lower synchronization variables*/
void incrementCycle()            { 
    cycle[id] = (cycle[id] + 1) % 3; 
    level[id] = 0;
    calm[id] = 0;
    cyclecounter[id] = cyclecounter[id] + 1;
}


    //// Synchronization methods

/**Returns true if the all neighbors are on the same or next cycle as self.*/
/* We need both cases (same cycle or next) because a neighboring disagreeing robot may complete a full loop and enter the next cycle before this robot continues.
We need to wait for every neighbor, else updating behavior is different for robots in different sized decision groups. */
bool compareCycle() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; isInEarlierCycle(r)) { return false; }
    }
    return true;

}

/**Returns true if no consenting neighbor is behind this robot in updating their D array.*/
/* This ensures that the robot does not ask a neighbor twice before that neighbor has a chance to update their values.
A neighbor can never be in an earlier cycle than this robot when compareLevels() is called.
This is because compareLevelsConsenting is only called in state `FindingDecisionGroup`.
Cycles are only incremented when entering state `AwaitingNeighbors`, and `AwaitingNeighbors` can only be exited when all neighbors are in the same or next cycle*/
bool compareLevelsConsenting() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; isConsenting(r) &amp;&amp; isInSameCycle(r) &amp;&amp; isLowerLevel(r) &amp;&amp; !isDone(r)) {  return false; }
    }
    return true;
}

/**Returns true if every neighbor has updated their preference.*/
/* This ensures that the robot does not start calculating their Decision groups based on outdated information.
A neighbor can never be in an earlier cycle than this robot when compareLevels() is called.
This is because compareLevels is only called in state `PreferencesUpdated`.
Cycles are only incremented when entering state `AwaitingNeighbors`, and `AwaitingNeighbors` can only be exited when all neighbors are in the same or next cycle*/
bool compareLevels() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; isInSameCycle(r) &amp;&amp; isLowerLevel(r) &amp;&amp; !isDone(r)) {  return false; }
    }
    return true;
}


/**Returns true if no consenting, updating, neighbor has a calmness of 0.*/
/* As this method is only colled when this robots calmness is 1, it works like a comparison, asking: are all eligible neighbors at the same or highe level of calmness?*/
/* TODO : UPDATE TEXT */
bool compareCalmness() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; isConsenting(r) &amp;&amp; isInSameCycle(r) &amp;&amp; !isDone(r) &amp;&amp; (isLowerLevel(r) || !isCalm(r))) { return false; }
    }
    return true;
}

    //// Updating and calculating preferences (P)

/**Updates the preferences of this robot according to the equation given in (Liu &amp; Lee, 2020)*/
/* Uses the last coherent state of each neighbor.*/
void updateP() {
    double sumP[Q];    // The sum of all neighbor's preference value for each choice (including self)
    int sumND;         // The total size of all neighbor's decision groups (including self)
    optionalRobot r;

    // First add yourself
    for (c : choice) {
                sumP[c] = sumP[c] + ND[id] * publicP[id][c];
    }
    sumND += ND[id];

    // Then add the each neighbor
    for (n : neighbor) {
        r = neighbors[n];
        if ( isRobot(r) ) {
            for (c : choice) {
                sumP[c] = sumP[c] + ND[r] * publicP[r][c];
            }
            sumND += ND[r];
        }
    }

    // Normalize
    for (c : choice) { P[c] = sumP[c] / sumND; } 
}

    //// Calculating consensus / decision group (D)

/** Add every robot to the decision group (D) of this robot that are present in the decision group of any neighbors with the same decision as this.
The function returns true if no new robots were added. */
bool syncWithConsentingNeighbors() {
    bool stale = true;
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; isConsenting(r)) {
            for (s : robot) {
                stale &amp;= (D[r][s] imply D[id][s]);  // Information is only new if the neighbor knows of an id that is in the group that this robot does not.
                D[id][s] = D[r][s] || D[id][s];     // Union operation
            }
        }
    }
    return stale;
}

void evaluateCalmness() {
    if (wasUpdated) { calm[id] = 0; }
    else if (calm[id] &lt; 2) { calm[id] = calm[id] + 1; }
    else if (compareCalmness()) { calm[id] = 3; }
    else { calm[id] = 2; }
}

    //// Initializations

// Resets the D array. 
void resetD() {
    for (r : robot) { D[id][r] = false; }
    D[id][id] = true;                      // A robot always agrees with itself
}

// Create inverted Index of neighbors (neighbors array)
void initNeighbors() {
    optionalRobot nextNeighbor;
    nextNeighbor = getNextTrue(-1, C[id]);                    // Find first neighboring robot

    for (n : neighbor) {
        if (isRobot(nextNeighbor)) {
            neighbors[n] = nextNeighbor;                  // Save neighbor in neighbors
            nextNeighbor = getNextTrue(nextNeighbor, C[id]);  // Find next neighboring robot
        } else {
            neighbors[n] = -1;                            // If there are no more neighbors
        }
    }
}

// Initialize a robot with random preferences.
void initialize() {
    initP(P);
    decision[id] = maxIndex(P);
    initNeighbors();
    level[id] = 0;
    cycle[id] = 0;
    resetD();
    level[id] = 1;
    mayContinue = false;
    // Meta values
    cyclecounter[id] = 0;
    allDone = false;
    done[id] = false;
    x = 0;
    sameCycle = false;
}

</declaration>
		<location id="id0" x="-178" y="-136">
			<name x="-161" y="-153">Initial</name>
			<label kind="exponentialrate" x="-204" y="-144">1</label>
			<urgent/>
		</location>
		<location id="id1" x="-178" y="-212">
			<name x="-144" y="-221">PreferencesUpdated</name>
			<label kind="exponentialrate" x="-178" y="-221">1</label>
		</location>
		<location id="id2" x="187" y="-85">
			<name x="204" y="-110">FindingDecisionGroup</name>
			<label kind="exponentialrate" x="187" y="-93">1</label>
		</location>
		<location id="id3" x="187" y="-331">
			<name x="204" y="-357">AwaitingNeighbors</name>
			<label kind="exponentialrate" x="187" y="-340">1</label>
		</location>
		<location id="id4" x="756" y="-331">
			<name x="746" y="-365">Terminal</name>
			<label kind="exponentialrate" x="748" y="-340">1</label>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-340" y="-238">!mayContinue</label>
			<label kind="assignment" x="-484" y="-221">mayContinue = compareLevels()</label>
			<nail x="-238" y="-238"/>
			<nail x="-238" y="-187"/>
		</transition>
		<transition id="id6">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="408" y="-348">ND[id] == R</label>
			<label kind="assignment" x="408" y="-331">done[id] = true,
allDone = count(done) == R ? 1 : 0,
sameCycle = allSameTimestamp(cycle)</label>
			<label kind="comments" x="408" y="-272">These updates are only for verification (SMC)</label>
		</transition>
		<transition id="id7">
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="102" y="-416">!mayContinue &amp;&amp; ND[id] != R</label>
			<label kind="assignment" x="110" y="-399">mayContinue = compareCycle()</label>
			<nail x="204" y="-374"/>
			<nail x="170" y="-374"/>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-246" y="-365">mayContinue &amp;&amp; ND[id] != R</label>
			<label kind="assignment" x="-246" y="-348">updateP(),
decision[id] = maxIndex(P),
resetD(),
level[id] = 1,
mayContinue = false</label>
		</transition>
		<transition id="id9">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="195" y="-289">calm[id] == 3</label>
			<label kind="assignment" x="195" y="-272">ND[id] = count(D[id]),
publicP[id] = P,
mayContinue = false,
incrementCycle()</label>
			<nail x="187" y="-102"/>
		</transition>
		<transition id="id10">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="187" y="-59">!mayContinue &amp;&amp; calm[id] &lt; 3</label>
			<label kind="assignment" x="187" y="-42">mayContinue = compareLevelsConsenting()</label>
			<nail x="187" y="-17"/>
			<nail x="136" y="-17"/>
			<nail x="136" y="-85"/>
		</transition>
		<transition id="id11">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="170" y="0">mayContinue &amp;&amp; calm[id] &lt; 3</label>
			<label kind="assignment" x="170" y="17">wasUpdated = !syncWithConsentingNeighbors(),
incrementLevel(),
evaluateCalmness(),
mayContinue = compareLevelsConsenting()</label>
			<nail x="535" y="-85"/>
			<nail x="535" y="17"/>
			<nail x="136" y="17"/>
			<nail x="136" y="-85"/>
		</transition>
		<transition id="id12">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="8" y="-178">mayContinue</label>
			<label kind="assignment" x="8" y="-161">mayContinue = false</label>
		</transition>
		<transition id="id13">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-170" y="-170">initialize()</label>
		</transition>
	</template>
	<system>system Robot;
</system>
	<queries>
		<option key="--diagnostic" value="-1"/>
		<query>
			<formula>E[&lt;=10000; 100](max: cyclecounter[0])</formula>
			<comment>How many cycles in total does robot 0 go through before consensus is reached.

Results:
For 7 robots with random preferences in a fully connected graphs. [&lt;=1000;5000] ≈ 2 (as expected)</comment>
			<result outcome="success" type="quantity" value="6.42 ± 0.554219 (95% CI)" timestamp="2025-05-05 15:34:49 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>6.42 ± 0.554219 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: cyclecounter[0]" yaxis="probability density">
					<series title="density" type="b(2.000000)" color="0x0000ff" encoding="csv">2.0,0.035
4.0,0.175
6.0,0.175
8.0,0.065
10.0,0.025
12.0,0.005
14.0,0.005
16.0,0.015
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.42,0.0
6.42,0.175
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 17]
Mean estimate of displayed sample: 6.42 ± 0.5542 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: cyclecounter[0]" yaxis="probability">
					<series title="probability" type="b(2.000000)" color="0x0000ff" encoding="csv">2.0,0.07
4.0,0.35
6.0,0.35
8.0,0.13
10.0,0.05
12.0,0.01
14.0,0.01
16.0,0.03
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.42,0.0
6.42,0.35
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 17]
Mean estimate of displayed sample: 6.42 ± 0.5542 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: cyclecounter[0]" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
4.0,0.07
6.0,0.42
8.0,0.77
10.0,0.9
12.0,0.95
14.0,0.96
16.0,0.97
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.42,0.0
6.42,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 17]
Mean estimate of displayed sample: 6.42 ± 0.5542 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: cyclecounter[0]" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2.0,0.03621669264517642
4.0,0.13891972845585734
6.0,0.5228808042760862
8.0,0.8482683886989525
10.0,0.9509953107785141
12.0,0.9835681208179479
14.0,0.9889955060138118
16.0,0.9937700284616936
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2.0,0.0
4.0,0.028605288907438693
6.0,0.3219855393547969
8.0,0.6751412672248969
10.0,0.8237774022599773
12.0,0.8871650888945373
14.0,0.9007428432873401
16.0,0.91482394702572
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
4.0,0.07
6.0,0.42
8.0,0.77
10.0,0.9
12.0,0.95
14.0,0.96
16.0,0.97
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.42,0.0
6.42,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 17]
Mean estimate of displayed sample: 6.42 ± 0.5542 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: cyclecounter[0]" yaxis="count">
					<series title="count" type="b(2.000000)" color="0x0000ff" encoding="csv">2.0,7.0
4.0,35.0
6.0,35.0
8.0,13.0
10.0,5.0
12.0,1.0
14.0,1.0
16.0,3.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.42,0.0
6.42,35.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2, bucket count=8
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 17]
Mean estimate of displayed sample: 6.42 ± 0.5542 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=10000; 100](max: x * (allDone ? 0 : 1) )</formula>
			<comment/>
			<result outcome="success" type="quantity" value="625.153 ± 330.493 (95% CI)" timestamp="2025-05-05 15:35:05 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>625.153 ± 330.493 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability density">
					<series title="density" type="b(987.481521)" color="0x0000ff" encoding="csv">125.18479019886435,9.721700908865241E-4
1112.666311178978,1.0126771780067959E-5
2100.1478321590916,0.0
3087.6293531392053,0.0
4075.110874119319,0.0
5062.592395099432,0.0
6050.073916079546,0.0
7037.555437059659,0.0
8025.036958039773,0.0
9012.518479019885,0.0
10000.0,3.0380315340203877E-5
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">625.1529697589306,0.0
625.1529697589306,9.72170090886524E-4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=987.48, bucket count=11
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [125, 1e+04]
Mean estimate of displayed sample: 625 ± 330 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="probability" type="b(987.481521)" color="0x0000ff" encoding="csv">125.18479019886435,0.96
1112.666311178978,0.01
2100.1478321590916,0.0
3087.6293531392053,0.0
4075.110874119319,0.0
5062.592395099432,0.0
6050.073916079546,0.0
7037.555437059659,0.0
8025.036958039773,0.0
9012.518479019885,0.0
10000.0,0.03
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">625.1529697589306,0.0
625.1529697589306,0.96
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=987.48, bucket count=11
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [125, 1e+04]
Mean estimate of displayed sample: 625 ± 330 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">125.18479019886435,0.0
1112.666311178978,0.96
2100.1478321590916,0.97
3087.6293531392053,0.97
4075.110874119319,0.97
5062.592395099432,0.97
6050.073916079546,0.97
7037.555437059659,0.97
8025.036958039773,0.97
9012.518479019885,0.97
10000.0,0.97
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">625.1529697589306,0.0
625.1529697589306,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=987.48, bucket count=11
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [125, 1e+04]
Mean estimate of displayed sample: 625 ± 330 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: x * (allDone ? 0 : 1)" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">125.18479019886435,0.03621669264517642
1112.666311178978,0.9889955060138118
2100.1478321590916,0.9937700284616936
3087.6293531392053,0.9937700284616936
4075.110874119319,0.9937700284616936
5062.592395099432,0.9937700284616936
6050.073916079546,0.9937700284616936
7037.555437059659,0.9937700284616936
8025.036958039773,0.9937700284616936
9012.518479019885,0.9937700284616936
10000.0,0.9937700284616936
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">125.18479019886435,0.0
1112.666311178978,0.9007428432873401
2100.1478321590916,0.91482394702572
3087.6293531392053,0.91482394702572
4075.110874119319,0.91482394702572
5062.592395099432,0.91482394702572
6050.073916079546,0.91482394702572
7037.555437059659,0.91482394702572
8025.036958039773,0.91482394702572
9012.518479019885,0.91482394702572
10000.0,0.91482394702572
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">125.18479019886435,0.0
1112.666311178978,0.96
2100.1478321590916,0.97
3087.6293531392053,0.97
4075.110874119319,0.97
5062.592395099432,0.97
6050.073916079546,0.97
7037.555437059659,0.97
8025.036958039773,0.97
9012.518479019885,0.97
10000.0,0.97
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">625.1529697589306,0.0
625.1529697589306,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=987.48, bucket count=11
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [125, 1e+04]
Mean estimate of displayed sample: 625 ± 330 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: x * (allDone ? 0 : 1)" yaxis="count">
					<series title="count" type="b(987.481521)" color="0x0000ff" encoding="csv">125.18479019886435,96.0
1112.666311178978,1.0
2100.1478321590916,0.0
3087.6293531392053,0.0
4075.110874119319,0.0
5062.592395099432,0.0
6050.073916079546,0.0
7037.555437059659,0.0
8025.036958039773,0.0
9012.518479019885,0.0
10000.0,3.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">625.1529697589306,0.0
625.1529697589306,96.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=987.48, bucket count=11
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [125, 1e+04]
Mean estimate of displayed sample: 625 ± 330 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000; 100](&lt;&gt; sameCycle &amp;&amp; allDone)</formula>
			<comment>It would be nice to have the reverse query.
Within this time, how much time does it take at most to reach this state?
There should be a few edge cases where a robot takes one more cycle than the others. 
This is because of unknown interleavings that causes a single robot (seemingly a robot with only one neighbor) 
to not calculate their decision group size correctly at the first cycle where all robots agree.</comment>
			<result outcome="failure" type="quantity" value="0.963592 ± 0.0339763 (95% CI)" timestamp="2025-05-05 15:35:23 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>0.963592 ± 0.0339763 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000]([] allDone imply sameCycle) &gt;= 0.98</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-05 15:35:38 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=200000](&lt;&gt; allDone) &gt;= 0.98</formula>
			<comment/>
			<option key="--search-order" value="2"/>
			<option key="--diagnostic" value="0"/>
			<result outcome="failure" type="quality" timestamp="2025-05-05 15:44:34 +0200">
				<option key="--search-order" value="2"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000](&lt;&gt; Robot(0).Terminal) &gt;= 0.98</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-04-30 14:39:35 +0200">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=10000; 1000] { ND, cyclecounter } : 1 : x &gt;= 10000 &amp;&amp; !allDone</formula>
			<comment>Counterexamples, should fail</comment>
			<result outcome="failure" type="interval" value="≤ 0.00368208 (95% CI)" timestamp="2025-04-30 14:40:01 +0200">
				<option key="--diagnostic" value="-1"/>
				<details>≤ 0.00368208 (95% CI)</details>
			</result>
		</query>
	</queries>
</nta>
