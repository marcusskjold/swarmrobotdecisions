<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>

//// ================================================
//// Constants and type definition

// Maximally connected network
/* 
const int R = 7;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 6;                      // Max number of neighbors

bool C[R][R] = {{false, true, true, true, true, true, true},
               {true, false, true, true, true, true, true},
               {true, true, false, true, true, true, true},
               {true, true, true, false, true, true, true},
               {true, true, true, true, false, true, true},
               {true, true, true, true, true, false, true},
               {true, true, true, true, true, true, false}};
*/

// Minimally connected network

const int R = 7;                       // Number of robots
const int Q = 4;                       // Number of choices
const int NN = 2;                      // Max number of neighbors

bool C[R][R] = {{false, true, false, false, false, false, false},
               {true, false, true, false, false, false, false},
               {false, true, false, true, false, false, false},
               {false, false, true, false, true, false, false},
               {false, false, false, true, false, true, false},
               {false, false, false, false, true, false, true},
               {false, false, false, false, false, true, false}};




typedef int[0,NN-1] neighbor;          // The set of possible neighbor indexes
typedef int[-1,NN-1] optionalNeighbor; // The set of possible neighbor indexes, -1 denoting null
typedef int[0,2] timestamp;            // Synchronization following rock-paper-scissors logic ( 0 &lt; 1 &lt; 2 &lt; 0 )
typedef int[0,Q-1] choice;             // The set of choice indexes
typedef int[-1,Q-1] optionalChoice;    // The set of choice indexes
typedef int[0,R-1] robot;              // The set of robot ids
typedef int[-1,R-1] optionalRobot;     // The set of robot ids, -1 denoting null
typedef int[0,3] calmness;

//// ================================================
//// Robot state

/* Most state is kept in global variables. 
However, a robot only ever accesses the state of its neighbors. 
In this we abstract away the specific communication protocal, while maintaining the requirement that robots have no global knowledge. */


/* The public decision of each robot. Is updated (along P), after publicP and ND but before any neighbor starts recalculating D */
choice decision[R];

/*The decision group of each robot - true means the robot of that ID is in the same group. Is continuously updated while in the calculateDsize state*/
bool D[R][R];

/* The public preferences of each robot - the preferences are only updated simultaneously with ND */
double publicP[R][Q];

/* The public size of the donsensus group of each robot. 
Is updated atomically, after having calculated D.
The paper calls this the consensus group, we call it the [D]ecision group 
This is to phonetically align the use of C and D for neighbors (connected robots) and consenting (same decision) respectively.*/
int[0,R] ND[R];

/* The reason why some fields are updated atomically and others continuously is because they are used for different purposes:
publicP and ND are used when updating neighboring robots preferences, and so they should represent the last coherent state.
D is used for propagating information to calculate ND, and so it updates continuously.
decision is determined right after P is updated. */

// Locking state
timestamp cycle[R];        // Used to synchronize cyclus.
timestamp level[R];        // Synchronization while calculating D.
calmness calm[R];         // Used for determining when D has been calculated.

//// =================================================
//// Functions

// Timestamps

// Returns true if the timestamp of robot r is behind or at equal to that of robot s. False if r is in front.
bool compareTimestamps(timestamp a, timestamp b) {
    if (a == b) return true;
    if ((a + 1) % 3 == b) return true;
    return false;
}

// Populate array with random values summing to 1 (PMF)
void initP(double &amp;P[Q]){
    double rands[Q];
    double ssum = 0;
    for (i : choice) {
        double val = random(1);
        rands[i] = val;
        ssum = ssum + val;
    }
    for (i : choice) {
        P[i] = rands[i] / ssum;
    }
}

// Count the number of true values in array
int[0,R] count(bool &amp;A[R]){
    return sum (i : robot) A[i] == true;
}

// Get the index of a highest value
choice maxIndex(double &amp;P[Q]){
    choice maxI = 0;
    double max = 0;
    for (i : choice){
        if (P[i] &gt; max) {
            max = P[i];
            maxI = i;
        }
    }
    return maxI;
}

// Get next true value of boolean array A *after* index i.
// Returns -1 if there is no next value
optionalRobot getNextTrue(int i, bool &amp;A[R]){
    while (i &lt; R-1) {
        i++;
        if (A[i]) return i;
        
    }
    return -1;
}

//// ================================================
//// Meta

// Return true if all values are equal. Used for verification
bool allSameTimestamp(timestamp &amp;A[R]){
    timestamp comparison = A[0];
    return forall (i : int[1,R-1]) A[i] == comparison;
}

// Have a robot finished
bool done[R];
bool allDone = false;
bool sameCycle = false;
clock x = 0;
int cyclecounter[R];</declaration>
	<template>
		<name>Robot</name>
		<parameter>robot id</parameter>
		<declaration>//// =====================================================
//// State

optionalRobot neighbors[NN];           // Inverted index of neighbors, index 0 to count(C)-1 contains index of true values in C. -1 for empty slots.
bool mayContinue;                      // Guard and synchronization variable - is updated with compareCycle() and compareLevels()
double P[Q];                           // Preferences as a PMF over all choices in Q.
bool wasUpdated;

//// =====================================================
//// Methods
// Functions that are simplified by having access to state

    //// Utility

bool isInSameCycle(robot r)      { return cycle[r] == cycle[id]; }
bool isConsenting(robot r)       { return decision[r] == decision[id]; }
bool isRobot(optionalRobot r)    { return r != -1; }
bool isCalm(robot r)             { return calm[r] &gt; 1; }
bool isLowerLevel(robot r)       { return !compareTimestamps(level[id], level[r]); }
bool isInEarlierCycle(robot r)   { return !compareTimestamps(cycle[id], cycle[r]); }
void incrementLevel()            { level[id] = (level[id] + 1) % 3; }

/**Increment cycle by one and reset lower synchronization variables*/
void incrementCycle()            { 
    cycle[id] = (cycle[id] + 1) % 3; 
    level[id] = 0;
    calm[id] = 0;
    cyclecounter[id] = cyclecounter[id] + 1;
}


    //// Synchronization methods

/**Returns true if the all neighbors are on the same or next cycle as self.*/
/* We need both cases (same cycle or next) because a neighboring disagreeing robot may complete a full loop and enter the next cycle before this robot continues.
We need to wait for every neighbor, else updating behavior is different for robots in different sized decision groups. */
bool compareCycle() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; isInEarlierCycle(r)) { return false; }
    }
    return true;

}

/**Returns true if no consenting neighbor is behind this robot in updating their D array.*/
/* This ensures that the robot does not ask a neighbor twice before that neighbor has a chance to update their values.
A neighbor can never be in an earlier cycle than this robot when compareLevels() is called.
This is because compareLevelsConsenting is only called in state `FindingDecisionGroup`.
Cycles are only incremented when entering state `AwaitingNeighbors`, and `AwaitingNeighbors` can only be exited when all neighbors are in the same or next cycle*/
bool compareLevelsConsenting() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; isConsenting(r) &amp;&amp; isInSameCycle(r) &amp;&amp; isLowerLevel(r)) {  return false; }
    }
    return true;
}

/**Returns true if every neighbor has updated their preference.*/
/* This ensures that the robot does not start calculating their Decision groups based on outdated information.
A neighbor can never be in an earlier cycle than this robot when compareLevels() is called.
This is because compareLevels is only called in state `PreferencesUpdated`.
Cycles are only incremented when entering state `AwaitingNeighbors`, and `AwaitingNeighbors` can only be exited when all neighbors are in the same or next cycle*/
bool compareLevels() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; isInSameCycle(r) &amp;&amp; isLowerLevel(r)) {  return false; }
    }
    return true;
}


/**Returns true if no consenting, updating, neighbor has a calmness of 0.*/
/* As this method is only colled when this robots calmness is 1, it works like a comparison, asking: are all eligible neighbors at the same or highe level of calmness?*/
/* TODO : UPDATE TEXT */
bool compareCalmness() {
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; isConsenting(r) &amp;&amp; isInSameCycle(r) &amp;&amp; (isLowerLevel(r) || !isCalm(r))) { return false; }
    }
    return true;
}

    //// Updating and calculating preferences (P)

/**Updates the preferences of this robot according to the equation given in (Liu &amp; Lee, 2020)*/
/* Uses the last coherent state of each neighbor.*/
void updateP() {
    double sumP[Q];    // The sum of all neighbor's preference value for each choice (including self)
    int sumND;         // The total size of all neighbor's decision groups (including self)
    optionalRobot r;

    // First add yourself
    for (c : choice) {
                sumP[c] = sumP[c] + ND[id] * publicP[id][c];
    }
    sumND += ND[id];

    // Then add the each neighbor
    for (n : neighbor) {
        r = neighbors[n];
        if ( isRobot(r) ) {
            for (c : choice) {
                sumP[c] = sumP[c] + ND[r] * publicP[r][c];
            }
            sumND += ND[r];
        }
    }

    // Normalize
    for (c : choice) { P[c] = sumP[c] / sumND; } 
}

    //// Calculating consensus / decision group (D)

/** Add every robot to the decision group (D) of this robot that are present in the decision group of any neighbors with the same decision as this.
The function returns true if no new robots were added. */
bool syncWithConsentingNeighbors() {
    bool stale = true;
    optionalRobot r;

    for (n : neighbor) {
        r = neighbors[n];
        if (isRobot(r) &amp;&amp; isConsenting(r)) {
            for (s : robot) {
                stale &amp;= (D[r][s] imply D[id][s]);  // Information is only new if the neighbor knows of an id that is in the group that this robot does not.
                D[id][s] = D[r][s] || D[id][s];     // Union operation
            }
        }
    }
    return stale;
}

void evaluateCalmness() {
    if (wasUpdated) { calm[id] = 0; }
    else if (calm[id] &lt; 2) { calm[id] = calm[id] + 1; }
    else if (compareCalmness()) { calm[id] = 3; }
    else { calm[id] = 2; }
}

    //// Initializations

// Resets the D array. 
void resetD() {
    for (r : robot) { D[id][r] = false; }
    D[id][id] = true;                      // A robot always agrees with itself
}

// Create inverted Index of neighbors (neighbors array)
void initNeighbors() {
    optionalRobot nextNeighbor;
    nextNeighbor = getNextTrue(-1, C[id]);                    // Find first neighboring robot

    for (n : neighbor) {
        if (isRobot(nextNeighbor)) {
            neighbors[n] = nextNeighbor;                  // Save neighbor in neighbors
            nextNeighbor = getNextTrue(nextNeighbor, C[id]);  // Find next neighboring robot
        } else {
            neighbors[n] = -1;                            // If there are no more neighbors
        }
    }
}

// Initialize a robot with random preferences.
void initialize() {
    initP(P);
    decision[id] = maxIndex(P);
    initNeighbors();
    level[id] = 0;
    cycle[id] = 0;
    resetD();
    level[id] = 1;
    mayContinue = false;
    // Meta values
    cyclecounter[id] = 0;
    allDone = false;
    done[id] = false;
    x = 0;
    sameCycle = false;
}

</declaration>
		<location id="id0" x="-178" y="-136">
			<name x="-161" y="-153">Initial</name>
			<label kind="exponentialrate" x="-188" y="-102">1</label>
			<urgent/>
		</location>
		<location id="id1" x="-178" y="-212">
			<name x="-144" y="-221">PreferencesUpdated</name>
			<label kind="exponentialrate" x="-178" y="-221">1</label>
		</location>
		<location id="id2" x="187" y="-85">
			<name x="212" y="-119">FindingDecisionGroup</name>
			<label kind="exponentialrate" x="187" y="-93">1</label>
		</location>
		<location id="id3" x="187" y="-331">
			<name x="204" y="-357">AwaitingNeighbors</name>
			<label kind="exponentialrate" x="187" y="-340">1</label>
		</location>
		<location id="id4" x="554" y="-26">
			<name x="571" y="-34">CheckCalmness</name>
			<label kind="exponentialrate" x="544" y="-17">1</label>
			<urgent/>
		</location>
		<location id="id5" x="756" y="-331">
			<name x="746" y="-365">Terminal</name>
			<label kind="exponentialrate" x="748" y="-340">1</label>
		</location>
		<init ref="id0"/>
		<transition id="id6">
			<source ref="id4"/>
			<target ref="id2"/>
			<nail x="552" y="34"/>
			<nail x="136" y="34"/>
			<nail x="136" y="-85"/>
		</transition>
		<transition id="id7">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-340" y="-238">!mayContinue</label>
			<label kind="assignment" x="-476" y="-221">mayContinue = compareLevels()</label>
			<nail x="-238" y="-238"/>
			<nail x="-238" y="-187"/>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="408" y="-348">ND[id] == R</label>
			<label kind="assignment" x="408" y="-331">done[id] = true,
allDone = count(done) == R ? 1 : 0,
sameCycle = allSameTimestamp(cycle)</label>
			<label kind="comments" x="408" y="-272">These updates are only for verification (SMC)</label>
		</transition>
		<transition id="id9">
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="102" y="-416">!mayContinue &amp;&amp; ND[id] != R</label>
			<label kind="assignment" x="110" y="-399">mayContinue = compareCycle()</label>
			<nail x="204" y="-374"/>
			<nail x="170" y="-374"/>
		</transition>
		<transition id="id10">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-246" y="-365">mayContinue &amp;&amp; ND[id] != R</label>
			<label kind="assignment" x="-246" y="-348">updateP(),
decision[id] = maxIndex(P),
resetD(),
level[id] = 1,
mayContinue = false</label>
		</transition>
		<transition id="id11">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="195" y="-289">calm[id] == 3</label>
			<label kind="assignment" x="195" y="-272">ND[id] = count(D[id]),
publicP[id] = P,
mayContinue = false,
incrementCycle()</label>
			<nail x="187" y="-102"/>
		</transition>
		<transition id="id12">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="195" y="-59">!mayContinue &amp;&amp; calm[id] &lt; 3</label>
			<label kind="assignment" x="195" y="-42">mayContinue = compareLevelsConsenting()</label>
			<nail x="187" y="-17"/>
			<nail x="136" y="-17"/>
			<nail x="136" y="-85"/>
		</transition>
		<transition id="id13">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="212" y="-102">mayContinue &amp;&amp; calm[id] &lt; 3</label>
			<label kind="assignment" x="561" y="-127">wasUpdated = !syncWithConsentingNeighbors(),
incrementLevel(),
evaluateCalmness(),
mayContinue = compareLevelsConsenting()</label>
			<nail x="552" y="-85"/>
		</transition>
		<transition id="id14">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="8" y="-178">mayContinue</label>
			<label kind="assignment" x="8" y="-161">mayContinue = false</label>
		</transition>
		<transition id="id15">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-170" y="-170">initialize()</label>
		</transition>
	</template>
	<system>system Robot;
</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula>E[&lt;=1000; 100](max: cyclecounter[0])</formula>
			<comment>How many cycles in total does robot 0 go through before consensus is reached.

Results:
For 7 robots with random preferences in a fully connected graphs. [&lt;=1000;5000] ≈ 2 (as expected)</comment>
			<option key="--exploration" value="0"/>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="quantity" value="8.49 ± 1.41139 (95% CI)" timestamp="2025-04-30 00:44:48 +0200">
				<option key="--exploration" value="0"/>
				<option key="--diagnostic" value="1"/>
				<details>8.49 ± 1.41139 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: cyclecounter[0]" yaxis="probability density">
					<series title="density" type="b(4.000000)" color="0x0000ff" encoding="csv">2.0,0.1
6.0,0.08
10.0,0.04
14.0,0.0025
18.0,0.0075
22.0,0.01
26.0,0.0025
30.0,0.005
34.0,0.0025
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">8.49,0.0
8.49,0.1
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4, bucket count=9
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 37]
Mean estimate of displayed sample: 8.49 ± 1.411 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: cyclecounter[0]" yaxis="probability">
					<series title="probability" type="b(4.000000)" color="0x0000ff" encoding="csv">2.0,0.4
6.0,0.32
10.0,0.16
14.0,0.01
18.0,0.03
22.0,0.04
26.0,0.01
30.0,0.02
34.0,0.01
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">8.49,0.0
8.49,0.4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4, bucket count=9
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 37]
Mean estimate of displayed sample: 8.49 ± 1.411 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: cyclecounter[0]" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
6.0,0.4
10.0,0.72
14.0,0.88
18.0,0.89
22.0,0.92
26.0,0.96
30.0,0.97
34.0,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">8.49,0.0
8.49,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4, bucket count=9
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 37]
Mean estimate of displayed sample: 8.49 ± 1.411 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: cyclecounter[0]" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2.0,0.03621669264517642
6.0,0.5027908495776652
10.0,0.8052063725088185
14.0,0.9364310974388407
18.0,0.9437929797145126
22.0,0.9648284374818372
26.0,0.9889955060138118
30.0,0.9937700284616936
34.0,0.9997468539670226
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2.0,0.0
6.0,0.3032947687028774
10.0,0.6213329952827324
14.0,0.7997643163800312
18.0,0.8116988678035574
22.0,0.848442364135579
26.0,0.9007428432873401
30.0,0.91482394702572
34.0,0.9455406146079194
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
6.0,0.4
10.0,0.72
14.0,0.88
18.0,0.89
22.0,0.92
26.0,0.96
30.0,0.97
34.0,0.99
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">8.49,0.0
8.49,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4, bucket count=9
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 37]
Mean estimate of displayed sample: 8.49 ± 1.411 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: cyclecounter[0]" yaxis="count">
					<series title="count" type="b(4.000000)" color="0x0000ff" encoding="csv">2.0,40.0
6.0,32.0
10.0,16.0
14.0,1.0
18.0,3.0
22.0,4.0
26.0,1.0
30.0,2.0
34.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">8.49,0.0
8.49,40.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=4, bucket count=9
Runs: 100 in total, 100 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 37]
Mean estimate of displayed sample: 8.49 ± 1.411 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000]([] (Robot(0).Terminal &amp;&amp; Robot(1).Terminal &amp;&amp; Robot(2).Terminal &amp;&amp; Robot(3).Terminal &amp;&amp; Robot(4).Terminal &amp;&amp; Robot(5).Terminal &amp;&amp; Robot(6).Terminal ) imply allDone) &gt;= 0.95</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-04-30 00:24:22 +0200">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000]([] (Robot(0).Terminal &amp;&amp; Robot(1).Terminal &amp;&amp; Robot(2).Terminal &amp;&amp; Robot(3).Terminal &amp;&amp; Robot(4).Terminal &amp;&amp; Robot(5).Terminal &amp;&amp; Robot(6).Terminal) ) &gt;= 0.95</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=10000](&lt;&gt; sameCycle &amp;&amp; allDone)</formula>
			<comment>Forstår slet ikke hvordan den kommer frem til de tal, den gør. Jeg har endnu ikke set et trace, der understøtter det.</comment>
			<option key="--exploration" value="0"/>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2025-04-30 00:44:52 +0200">
				<option key="--exploration" value="0"/>
				<option key="--diagnostic" value="1"/>
				<details>≥ 0.950056 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(129.078191)" color="0x0000ff" encoding="csv">51.148602190767036,0.003228017559210885
180.22679306917234,0.0020444111208335605
309.3049839475776,9.684052677632655E-4
438.383174825983,5.380029265351475E-4
567.4613657043883,5.380029265351475E-4
696.5395565827936,0.0
825.617747461199,2.15201170614059E-4
954.6959383396043,1.076005853070295E-4
1083.7741292180094,1.076005853070295E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">283.19764308926875,0.0
283.19764308926875,0.0032280175592108856
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=129.08, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [51.15, 1213]
Mean estimate of displayed sample: 283.2 ± 55.02 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(129.078191)" color="0xa0a0ff" encoding="csv">51.148602190767036,0.5388867416042286
180.22679306917234,0.3810279267716762
309.3049839475776,0.22407193574325335
438.383174825983,0.15466731481612306
567.4613657043883,0.15466731481612306
696.5395565827936,0.04994408370585468
825.617747461199,0.09676728911341523
954.6959383396043,0.07497131085391912
1083.7741292180094,0.07497131085391912
					</series>
					<series title="lower limit" type="b(129.078191)" color="0x0000ff" encoding="csv">51.148602190767036,0.30152116823103925
180.22679306917234,0.1669539560334236
309.3049839475776,0.05878331705656036
438.383174825983,0.022931659153745478
567.4613657043883,0.022931659153745478
696.5395565827936,0.0
825.617747461199,0.0033819003261732383
954.6959383396043,3.515744052335976E-4
1083.7741292180094,3.515744052335976E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">283.19764308926875,0.0
283.19764308926875,0.004174886074378534
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=129.08, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [51.15, 1213]
Mean estimate of displayed sample: 283.2 ± 55.02 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(129.078191)" color="0x0000ff" encoding="csv">51.148602190767036,0.4166666666666667
180.22679306917234,0.2638888888888889
309.3049839475776,0.125
438.383174825983,0.06944444444444445
567.4613657043883,0.06944444444444445
696.5395565827936,0.0
825.617747461199,0.027777777777777776
954.6959383396043,0.013888888888888888
1083.7741292180094,0.013888888888888888
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">283.19764308926875,0.0
283.19764308926875,0.4166666666666667
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=129.08, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [51.15, 1213]
Mean estimate of displayed sample: 283.2 ± 55.02 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(129.078191)" color="0xa0a0ff" encoding="csv">51.148602190767036,0.5388867416042286
180.22679306917234,0.3810279267716762
309.3049839475776,0.22407193574325335
438.383174825983,0.15466731481612306
567.4613657043883,0.15466731481612306
696.5395565827936,0.04994408370585468
825.617747461199,0.09676728911341523
954.6959383396043,0.07497131085391912
1083.7741292180094,0.07497131085391912
					</series>
					<series title="lower limit" type="b(129.078191)" color="0x0000ff" encoding="csv">51.148602190767036,0.30152116823103925
180.22679306917234,0.1669539560334236
309.3049839475776,0.05878331705656036
438.383174825983,0.022931659153745478
567.4613657043883,0.022931659153745478
696.5395565827936,0.0
825.617747461199,0.0033819003261732383
954.6959383396043,3.515744052335976E-4
1083.7741292180094,3.515744052335976E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">283.19764308926875,0.0
283.19764308926875,0.5388867416042286
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=129.08, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [51.15, 1213]
Mean estimate of displayed sample: 283.2 ± 55.02 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">51.148602190767036,0.0
180.22679306917234,0.4166666666666667
309.3049839475776,0.6805555555555556
438.383174825983,0.8055555555555556
567.4613657043883,0.875
696.5395565827936,0.9444444444444444
825.617747461199,0.9444444444444444
954.6959383396043,0.9722222222222222
1083.7741292180094,0.9861111111111112
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">283.19764308926875,0.0
283.19764308926875,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=129.08, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [51.15, 1213]
Mean estimate of displayed sample: 283.2 ± 55.02 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">51.148602190767036,0.04994408370585468
180.22679306917234,0.5388867416042286
309.3049839475776,0.7855820639126873
438.383174825983,0.8894162133215106
567.4613657043883,0.9412166829434396
696.5395565827936,0.9846574628888694
825.617747461199,0.9846574628888694
954.6959383396043,0.9966180996738268
1083.7741292180094,0.9996484255947664
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">51.148602190767036,0.0
180.22679306917234,0.30152116823103925
309.3049839475776,0.560141563471466
438.383174825983,0.6953310667013166
567.4613657043883,0.7759280642567467
696.5395565827936,0.863821350687076
825.617747461199,0.863821350687076
954.6959383396043,0.9032327108865847
1083.7741292180094,0.9250286891460808
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">51.148602190767036,0.0
180.22679306917234,0.4166666666666667
309.3049839475776,0.6805555555555556
438.383174825983,0.8055555555555556
567.4613657043883,0.875
696.5395565827936,0.9444444444444444
825.617747461199,0.9444444444444444
954.6959383396043,0.9722222222222222
1083.7741292180094,0.9861111111111112
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">283.19764308926875,0.0
283.19764308926875,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=129.08, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [51.15, 1213]
Mean estimate of displayed sample: 283.2 ± 55.02 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(129.078191)" color="0x0000ff" encoding="csv">51.148602190767036,30.0
180.22679306917234,19.0
309.3049839475776,9.0
438.383174825983,5.0
567.4613657043883,5.0
696.5395565827936,0.0
825.617747461199,2.0
954.6959383396043,1.0
1083.7741292180094,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">283.19764308926875,0.0
283.19764308926875,30.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=129.08, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [51.15, 1213]
Mean estimate of displayed sample: 283.2 ± 55.02 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=10000]([] !allDone) &lt;= 0.06</formula>
			<comment/>
			<option key="--search-order" value="2"/>
			<option key="--diagnostic" value="0"/>
			<result outcome="success" type="quality" timestamp="2025-04-30 00:45:01 +0200">
				<option key="--search-order" value="2"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>Pr[x&lt;=10000](&lt;&gt; Robot(0).Terminal)</formula>
			<comment/>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2025-04-30 00:45:36 +0200">
				<option key="--diagnostic" value="1"/>
				<details>≥ 0.950056 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="x" yaxis="probability density">
					<series title="density" type="b(125.761422)" color="0x0000ff" encoding="csv">41.248899588081336,0.003313151691967187
167.01032116044237,0.0020983294049125517
292.77174273280343,8.835071178579165E-4
418.53316430516446,7.73068728125677E-4
544.2945858775255,5.521919486611978E-4
670.0560074498866,1.1043838973223957E-4
795.8174290222477,1.1043838973223957E-4
921.5788505946086,0.0
1047.3402721669697,1.1043838973223957E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">263.345932681319,0.0
263.345932681319,0.003313151691967187
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=125.76, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [41.25, 1173]
Mean estimate of displayed sample: 263.3 ± 49.91 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="x" yaxis="probability density">
					<series title="upper limit" type="b(125.761422)" color="0xa0a0ff" encoding="csv">41.248899588081336,0.5388867416042286
167.01032116044237,0.3810279267716762
292.77174273280343,0.20724687066674882
418.53316430516446,0.19011034044555922
544.2945858775255,0.15466731481612306
670.0560074498866,0.07497131085391912
795.8174290222477,0.07497131085391912
921.5788505946086,0.04994408370585468
1047.3402721669697,0.07497131085391912
					</series>
					<series title="lower limit" type="b(125.761422)" color="0x0000ff" encoding="csv">41.248899588081336,0.30152116823103925
167.01032116044237,0.1669539560334236
292.77174273280343,0.04920803927064098
418.53316430516446,0.039989500933602505
544.2945858775255,0.022931659153745478
670.0560074498866,3.515744052335976E-4
795.8174290222477,3.515744052335976E-4
921.5788505946086,0.0
1047.3402721669697,3.515744052335976E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">263.345932681319,0.0
263.345932681319,0.004284992447339361
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=125.76, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [41.25, 1173]
Mean estimate of displayed sample: 263.3 ± 49.91 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="x" yaxis="probability">
					<series title="probability" type="b(125.761422)" color="0x0000ff" encoding="csv">41.248899588081336,0.4166666666666667
167.01032116044237,0.2638888888888889
292.77174273280343,0.1111111111111111
418.53316430516446,0.09722222222222222
544.2945858775255,0.06944444444444445
670.0560074498866,0.013888888888888888
795.8174290222477,0.013888888888888888
921.5788505946086,0.0
1047.3402721669697,0.013888888888888888
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">263.345932681319,0.0
263.345932681319,0.4166666666666667
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=125.76, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [41.25, 1173]
Mean estimate of displayed sample: 263.3 ± 49.91 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="x" yaxis="probability">
					<series title="upper limit" type="b(125.761422)" color="0xa0a0ff" encoding="csv">41.248899588081336,0.5388867416042286
167.01032116044237,0.3810279267716762
292.77174273280343,0.20724687066674882
418.53316430516446,0.19011034044555922
544.2945858775255,0.15466731481612306
670.0560074498866,0.07497131085391912
795.8174290222477,0.07497131085391912
921.5788505946086,0.04994408370585468
1047.3402721669697,0.07497131085391912
					</series>
					<series title="lower limit" type="b(125.761422)" color="0x0000ff" encoding="csv">41.248899588081336,0.30152116823103925
167.01032116044237,0.1669539560334236
292.77174273280343,0.04920803927064098
418.53316430516446,0.039989500933602505
544.2945858775255,0.022931659153745478
670.0560074498866,3.515744052335976E-4
795.8174290222477,3.515744052335976E-4
921.5788505946086,0.0
1047.3402721669697,3.515744052335976E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">263.345932681319,0.0
263.345932681319,0.5388867416042286
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=125.76, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [41.25, 1173]
Mean estimate of displayed sample: 263.3 ± 49.91 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="x" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">41.248899588081336,0.0
167.01032116044237,0.4166666666666667
292.77174273280343,0.6805555555555556
418.53316430516446,0.7916666666666666
544.2945858775255,0.8888888888888888
670.0560074498866,0.9583333333333334
795.8174290222477,0.9722222222222222
921.5788505946086,0.9861111111111112
1047.3402721669697,0.9861111111111112
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">263.345932681319,0.0
263.345932681319,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=125.76, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [41.25, 1173]
Mean estimate of displayed sample: 263.3 ± 49.91 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="x" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">41.248899588081336,0.04994408370585468
167.01032116044237,0.5388867416042286
292.77174273280343,0.7855820639126873
418.53316430516446,0.8784487970921917
544.2945858775255,0.950791960729359
670.0560074498866,0.9913235026836562
795.8174290222477,0.9966180996738268
921.5788505946086,0.9996484255947664
1047.3402721669697,0.9996484255947664
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">41.248899588081336,0.0
167.01032116044237,0.30152116823103925
292.77174273280343,0.560141563471466
418.53316430516446,0.6797704888706283
544.2945858775255,0.7927531293332511
670.0560074498866,0.8830251801740586
795.8174290222477,0.9032327108865847
921.5788505946086,0.9250286891460808
1047.3402721669697,0.9250286891460808
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">41.248899588081336,0.0
167.01032116044237,0.4166666666666667
292.77174273280343,0.6805555555555556
418.53316430516446,0.7916666666666666
544.2945858775255,0.8888888888888888
670.0560074498866,0.9583333333333334
795.8174290222477,0.9722222222222222
921.5788505946086,0.9861111111111112
1047.3402721669697,0.9861111111111112
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">263.345932681319,0.0
263.345932681319,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=125.76, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [41.25, 1173]
Mean estimate of displayed sample: 263.3 ± 49.91 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="x" yaxis="count">
					<series title="count" type="b(125.761422)" color="0x0000ff" encoding="csv">41.248899588081336,30.0
167.01032116044237,19.0
292.77174273280343,8.0
418.53316430516446,7.0
544.2945858775255,5.0
670.0560074498866,1.0
795.8174290222477,1.0
921.5788505946086,0.0
1047.3402721669697,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">263.345932681319,0.0
263.345932681319,30.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=125.76, bucket count=9
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [41.25, 1173]
Mean estimate of displayed sample: 263.3 ± 49.91 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[x&lt;=1000]([] allDone imply sameCycle) &gt;= 0.95</formula>
			<comment/>
			<option key="--exploration" value="0"/>
			<option key="--diagnostic" value="0"/>
			<result outcome="success" type="quality" timestamp="2025-04-30 00:45:44 +0200">
				<option key="--exploration" value="0"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=1000; 100] { decision, ND } : 1 : x &gt;= 1000 &amp;&amp; !allDone</formula>
			<comment>Counterexamples</comment>
			<option key="--exploration" value="0"/>
			<option key="--search-order" value="0"/>
			<option key="--diagnostic" value="1"/>
			<result outcome="failure" type="interval" value="≤ 0.0362167 (95% CI)" timestamp="2025-04-30 00:45:49 +0200">
				<option key="--exploration" value="0"/>
				<option key="--search-order" value="0"/>
				<option key="--diagnostic" value="1"/>
				<details>≤ 0.0362167 (95% CI)</details>
			</result>
		</query>
	</queries>
</nta>
