<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int R = 3;  // Number of robots
const int Q = 2;  // Number of choices
const int NN = 2; // Max number of neighbors

const int r = R-1; 
const int q = Q-1;
const int nn = NN-1;
const int RESOLUTION = 10;

// Meta

meta int rounds[R];

// Communications

typedef struct {
    int[0,r] robot;
    int[0,q] decision;
    // bool join;
} decisionMSG;

// decisionMSG inbox[R]; // Not needed
broadcast chan inform[R];
const decisionMSG dummy = {0,0};
decisionMSG var;


// Functions

void initP(double &amp;P[Q]){
    double rands[Q];
    double ssum = 0;
    for (i : int[0,q]) {
        double val = random(1);
        rands[i] = val;
        ssum = ssum + val;
    }
    for (i : int[0,q]) {
        P[i] = rands[i] / ssum;
    }
}

int[0,r] count(bool A[R]){
    return sum (i : int[0,r]) A[i] == true;
}

int[-1,r] getNextTrue(int i, bool &amp;A[R]){
    while (i &lt; R) {
        if (A[i]) return i;
        i++;
    }
    return -1;
}

int[0,q] maxIndex(double &amp;P[Q]){
    int[0,q] maxI = 0;
    double max = 0;
    for (i : int[0,q]){
        if (P[i] &gt; max) {
            max = P[i];
            maxI = i;
        }
    }
    return maxI;
}

int[0,q] maxIndexAlt(int[0,RESOLUTION] &amp;P[Q]){
    int[0,q] maxI = 0;
    int max = 0;
    for (i : int[0,q]){
        if (P[i] &gt; max) {
            max = P[i];
            maxI = i;
        }
    }
    return maxI;
}

int minIndex(int P[R]){
    int[0,r] minI = 0;
    double min = 0;
    for (i : int[0,q]){
        if (P[i] &lt; min) {
            min = P[i];
            minI = i;
        }
    }
    return minI;
}</declaration>
	<template>
		<name>Robot</name>
		<parameter>int[0,R] id, bool &amp;C[R]</parameter>
		<declaration>bool D[R]; // Local consensus group
bool CD[R]; // Intersection of C &amp; D - Consenting Neighbors
int[0,NN] N; // Size of D (should be within NN)
double P[Q]; // Preferences
int[0,q] decision; // Exhibited decision (max of P)

// Dynamic

// int[0,nn] updatedNeighbors;
int[-1,r] nextNeighbor;
int[-1,r] nextConsenter;


decisionMSG toPropagate;

decisionMSG joinD() {
    decisionMSG d = {id, decision};
    return d;
}

bool shouldProp() {
    return (toPropagate.decision == decision &amp;&amp; !D[toPropagate.robot]) ||
           (toPropagate.decision != decision &amp;&amp; D[toPropagate.robot]);
}

bool handleMSG() {
    return D[toPropagate.robot] = (toPropagate.decision == decision) ? true : false;
}</declaration>
		<location id="id0" x="-1700" y="-238">
			<name x="-1709" y="-272">initialize</name>
			<committed/>
		</location>
		<location id="id1" x="-1275" y="-238">
			<name x="-1266" y="-263">informDecision</name>
			<label kind="exponentialrate" x="-1258" y="-280">1</label>
		</location>
		<location id="id2" x="-833" y="-238">
			<name x="-807" y="-272">neutral</name>
			<label kind="exponentialrate" x="-850" y="-229">1</label>
			<urgent/>
		</location>
		<location id="id3" x="-1309" y="-145">
			<name x="-1479" y="-127">evaluateDecisionMSG</name>
			<committed/>
		</location>
		<location id="id4" x="-1309" y="0">
			<name x="-1479" y="-25">propagateDecision</name>
			<label kind="exponentialrate" x="-1334" y="8">1</label>
		</location>
		<location id="id5" x="-833" y="-399">
			<name x="-843" y="-433">update</name>
		</location>
		<init ref="id0"/>
		<transition id="id6">
			<source ref="id5"/>
			<target ref="id0"/>
			<nail x="-1700" y="-399"/>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="assignment" x="-807" y="-289">rounds[id] += 1</label>
		</transition>
		<transition id="id8">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-1249" y="-42">nextConsenter == -1 &amp;&amp;
nextNeighbor == -1</label>
			<nail x="-782" y="0"/>
			<nail x="-782" y="-238"/>
		</transition>
		<transition id="id9">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-1037" y="-212">inform[id]?</label>
			<label kind="assignment" x="-1037" y="-195">toPropagate = var,
var = dummy</label>
			<nail x="-833" y="-144"/>
		</transition>
		<transition id="id10">
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-1725" y="-59">nextConsenter == -1 &amp;&amp;
nextNeighbor &gt;= 0</label>
			<nail x="-1521" y="0"/>
			<nail x="-1521" y="-238"/>
		</transition>
		<transition id="id11">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-1470" y="43">nextConsenter &gt;= 0</label>
			<label kind="synchronisation" x="-1317" y="110">inform[nextConsenter]!</label>
			<label kind="assignment" x="-1317" y="127">var = toPropagate,
nextConsenter = getNextTrue(nextConsenter+1, C)</label>
			<nail x="-1309" y="102"/>
			<nail x="-1190" y="102"/>
			<nail x="-1190" y="59"/>
			<nail x="-1292" y="51"/>
		</transition>
		<transition id="id12">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-1300" y="-119">shouldProp() == true</label>
			<label kind="assignment" x="-1300" y="-102">handleMSG(),
nextConsenter = getNextTrue(0,CD)</label>
		</transition>
		<transition id="id13">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-1496" y="-204">shouldProp() == false</label>
			<nail x="-1309" y="-238"/>
		</transition>
		<transition id="id14">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-1240" y="-212">inform[id]?</label>
			<label kind="assignment" x="-1240" y="-196">toPropagate = var,
var = dummy</label>
			<nail x="-1249" y="-238"/>
			<nail x="-1249" y="-145"/>
		</transition>
		<transition id="id15">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-1317" y="-382">nextNeighbor &gt;= 0</label>
			<label kind="synchronisation" x="-1317" y="-365">inform[nextNeighbor &gt;? 0]!</label>
			<label kind="assignment" x="-1317" y="-348">var = joinD(),
nextNeighbor = getNextTrue(nextNeighbor+1, C)</label>
			<nail x="-1275" y="-289"/>
			<nail x="-1309" y="-289"/>
			<nail x="-1309" y="-238"/>
		</transition>
		<transition id="id16">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-1096" y="-263">nextNeighbor == -1</label>
		</transition>
		<transition id="id17">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-1827" y="-229">initP(P),
N = count(C),
decision = maxIndex(P),
nextNeighbor = getNextTrue(0,C),
D[id] = true</label>
		</transition>
	</template>
	<template>
		<name>RobotInt</name>
		<parameter>int[0,R] id, bool &amp;C[R]</parameter>
		<declaration>bool D[R]; // Local consensus group
bool CD[R]; // Intersection of C &amp; D - Consenting Neighbors
int[0,NN] N; // Size of D (should be within NN)
int[0,RESOLUTION] P[Q]; // Preferences
int[0,q] decision; // Exhibited decision (max of P)

// Dynamic

// int[0,nn] updatedNeighbors;
int[-1,r] nextNeighbor;
int[-1,r] nextConsenter;


decisionMSG toPropagate;

decisionMSG joinD() {
    decisionMSG d = {id, decision};
    return d;
}

bool shouldProp() {
    return (toPropagate.decision == decision &amp;&amp; !D[toPropagate.robot]) ||
           (toPropagate.decision != decision &amp;&amp; D[toPropagate.robot]);
}

bool handleMSG() {
    return D[toPropagate.robot] = (toPropagate.decision == decision) ? true : false;
}

// Throwaway

int prefInit = 0;</declaration>
		<location id="id18" x="-1895" y="-238">
			<name x="-1904" y="-272">initialize</name>
		</location>
		<location id="id19" x="-1275" y="-238">
			<name x="-1232" y="-263">informDecision</name>
		</location>
		<location id="id20" x="-833" y="-238">
			<name x="-807" y="-272">neutral</name>
		</location>
		<location id="id21" x="-1309" y="-145">
			<name x="-1479" y="-127">evaluateDecisionMSG</name>
			<committed/>
		</location>
		<location id="id22" x="-1309" y="0">
			<name x="-1479" y="-25">propagateDecision</name>
		</location>
		<location id="id23" x="-1683" y="-238">
		</location>
		<init ref="id18"/>
		<transition id="id24">
			<source ref="id23"/>
			<target ref="id19"/>
			<label kind="guard" x="-1649" y="-289">prefInit == Q</label>
			<label kind="assignment" x="-1666" y="-263">decision = maxIndexAlt(P)</label>
		</transition>
		<transition id="id25">
			<source ref="id23"/>
			<target ref="id23"/>
			<label kind="select" x="-1946" y="-144">i : int[0,RESOLUTION]</label>
			<label kind="guard" x="-1759" y="-144">prefInit &lt; Q</label>
			<label kind="assignment" x="-1759" y="-119">P[prefInit] = i,
prefInit++</label>
			<nail x="-1657" y="-161"/>
			<nail x="-1751" y="-161"/>
		</transition>
		<transition id="id26">
			<source ref="id22"/>
			<target ref="id20"/>
			<label kind="guard" x="-1249" y="-42">nextConsenter == -1 &amp;&amp;
nextNeighbor == -1</label>
			<nail x="-782" y="0"/>
			<nail x="-782" y="-238"/>
		</transition>
		<transition id="id27">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1037" y="-212">inform[id]?</label>
			<label kind="assignment" x="-1037" y="-195">toPropagate = var,
var = dummy</label>
			<nail x="-833" y="-144"/>
		</transition>
		<transition id="id28">
			<source ref="id22"/>
			<target ref="id19"/>
			<label kind="guard" x="-1725" y="-59">nextConsenter == -1 &amp;&amp;
nextNeighbor &gt;= 0</label>
			<nail x="-1521" y="0"/>
			<nail x="-1521" y="-238"/>
		</transition>
		<transition id="id29">
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="guard" x="-1470" y="43">nextConsenter &gt;= 0</label>
			<label kind="synchronisation" x="-1317" y="110">inform[nextConsenter]!</label>
			<label kind="assignment" x="-1317" y="127">var = toPropagate,
nextConsenter = getNextTrue(nextConsenter+1, C)</label>
			<nail x="-1309" y="102"/>
			<nail x="-1190" y="102"/>
			<nail x="-1190" y="59"/>
			<nail x="-1292" y="59"/>
		</transition>
		<transition id="id30">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-1300" y="-119">shouldProp() == true</label>
			<label kind="assignment" x="-1300" y="-102">handleMSG(),
nextConsenter = getNextTrue(0,CD)</label>
		</transition>
		<transition id="id31">
			<source ref="id21"/>
			<target ref="id19"/>
			<label kind="guard" x="-1496" y="-204">shouldProp() == false</label>
			<nail x="-1309" y="-238"/>
		</transition>
		<transition id="id32">
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1240" y="-212">inform[id]?</label>
			<label kind="assignment" x="-1240" y="-196">toPropagate = var,
var = dummy</label>
			<nail x="-1249" y="-238"/>
			<nail x="-1249" y="-145"/>
		</transition>
		<transition id="id33">
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="guard" x="-1241" y="-348">nextNeighbor &gt;= 0</label>
			<label kind="synchronisation" x="-1419" y="-416">inform[nextNeighbor]!</label>
			<label kind="assignment" x="-1419" y="-399">var = joinD(),
nextNeighbor = getNextTrue(nextNeighbor+1, C)</label>
			<nail x="-1249" y="-238"/>
			<nail x="-1249" y="-348"/>
			<nail x="-1309" y="-348"/>
			<nail x="-1309" y="-238"/>
		</transition>
		<transition id="id34">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="-1054" y="-263">nextNeighbor == -1</label>
		</transition>
		<transition id="id35">
			<source ref="id18"/>
			<target ref="id23"/>
			<label kind="assignment" x="-1887" y="-365">N = count(C),
nextNeighbor = getNextTrue(0,C),
D[id] = true</label>
		</transition>
	</template>
	<system>// 
/*
const bool c5[5][R] = {{false, true, true,  false, false },
                {true,  false, false, true,  false },
                {true,  false, false, false, false },
                {false, true,  false, false, true  },
                {false, false, false, true,  false }};
*/

bool c3_0[R] = {false, true,  true  };
bool c3_1[R] = {true,  false, false };
bool c3_2[R] = {true,  false, false };

// Place template instantiations here.

/* For R = 5
r0 = Robot(0, c5[0]);
r1 = Robot(1, c5[1]);
r2 = Robot(2, c5[2]);
r3 = Robot(3, c5[3]);
r4 = Robot(4, c5[4]);
*/

r0 = Robot(0, c3_0);
r1 = Robot(1, c3_1);
r2 = Robot(2, c3_2);

// List one or more processes to be composed into a system.
system r0, r1, r2;</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
